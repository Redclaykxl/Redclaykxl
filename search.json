[{"title":"C语言程序编写","url":"/2023/11/03/C%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E7%BC%96%E5%86%99/","content":"输出大于所输入数的素数#include &lt;stdio.h>\n#include &lt;stdlib.h>\n\nint is_prime(int n) &#123;\n    if (n &lt;= 1) &#123;\n        return 0;\n    &#125;\n    for (int i = 2; i * i &lt;= n; i++) &#123;\n        if (n % i == 0) &#123;\n            return 0;\n        &#125;\n    &#125;\n    return 1;\n&#125;\n\nint main() &#123;\n    int n, count = 0;\n    printf(\"请输入一个整数：\");\n    scanf(\"%d\", &amp;n);\n    for (int i = n + 1; count &lt; 3; i++) &#123;\n        if (is_prime(i)) &#123;\n            printf(\"%d \", i);\n            count++;\n        &#125;\n    &#125;\n    return 0;\n&#125;\n\n输出公式中s&#x3D;1+1&#x2F;(1+2)…1&#x2F;(1+2+…+n)的n的值#include &lt;stdio.h\n#include &lt;stdlib.h>\n\nfloat fun(int n)\n&#123;\n    int i;\n    float s=1.0,h=1;\n    for (i=2;i&lt;=n;i++)&#123;\n        h=h+ i ;\n        s=s+1.0/h;\n    &#125;\n    return s;\n&#125;\n\nint main()\n&#123;\n    int n;\n    float s;\n    printf(\"Please enter N:\\n\");\n    scanf(\"%d\",&amp;n);\n    s=fun(n);\n    printf(\"the result is:%f\",s);\n    return 0;\n    \n&#125;\n\n星号金字塔#include &lt;stdio.h>\n\nint main() &#123;\n    int rows;\n    printf(\"请输入金字塔的行数：\");\n    scanf(\"%d\", &amp;rows);\n    for (int i = 1; i &lt;= rows; i++) &#123;\n        for (int j = 1; j &lt;= rows - i; j++) &#123;\n            printf(\" \");\n        &#125;\n        for (int j = 1; j &lt;= 2 * i - 1; j++) &#123;\n            printf(\"*\");\n        &#125;\n        printf(\"\\n\");\n    &#125;\n    return 0;\n&#125;\n\n99乘法表#include &lt;stdio.h>\n\nint main() &#123;\n    for (int i = 1; i &lt;= 9; i++) &#123;\n        for (int j = 1; j &lt;= i; j++) &#123;\n            printf(\"%d * %d = %d\\t\", j, i, i * j);\n        &#125;\n        printf(\"\\n\");\n    &#125;\n    return 0;\n&#125;\n\n用C语言实现整数的大小排序#include &lt;stdio.h>\n\n\nint main() &#123;\n    int a, b, c, t;\n    printf(\"请输入三个整数，用逗号隔开：\");\n    scanf(\"%d,%d,%d\", &amp;a, &amp;b, &amp;c);\n    if (a > b) &#123;\n        t = a;\n        a = b;\n        b = t;\n    &#125;\n    if (a > c) &#123;\n        t = a;\n        a = c;\n        c = t;\n    &#125;\n    if (b > c) &#123;\n        t = b;\n        b = c;\n        c = t;\n    &#125;\n    printf(\"排序后的结果为：%d, %d, %d\\n\", a, b, c);\n    return 0;\n&#125;\n\n判断三角形#include &lt;stdio.h>\n#include &lt;math.h>\n\nint main() &#123;\n    float a, b, c;\n    printf(\"请输入三角形的三条边，用逗号隔开：\");\n    scanf(\"%f,%f,%f\", &amp;a, &amp;b, &amp;c);\n    if (a + b > c &amp;&amp; b + c > a &amp;&amp; a + c > b) &#123;\n        printf(\"这是一个\");\n        if (a == b &amp;&amp; b == c) &#123;\n            printf(\"等边三角形\");\n        &#125; else if (a == b || b == c || a == c) &#123;\n            printf(\"等腰三角形\");\n        &#125; else if (pow(a, 2) + pow(b, 2) == pow(c, 2) || pow(a, 2) + pow(c, 2) == pow(b, 2) || pow(b, 2) + pow(c, 2) == pow(a, 2)) &#123;\n            printf(\"直角三角形\");\n        &#125; else &#123;\n            printf(\"普通三角形\");\n        &#125;\n        printf(\"\\n\");\n    &#125; else &#123;\n        printf(\"这不是一个三角形\\n\");\n    &#125;\n    return 0;\n&#125;\n\n输出星号组成的菱形#include &lt;stdio.h>\n\nint main() &#123;\n    int n, i, j, k;\n    printf(\"请输入菱形边长（奇数）：\");\n    scanf(\"%d\", &amp;n);\n    for (i = 1; i &lt;= n; ++i) &#123;\n        for (j = 1; j &lt;= n - i; ++j) &#123;\n            printf(\" \");\n        &#125;\n        for (k = 1; k &lt;= 2 * i - 1; ++k) &#123;\n            printf(\"*\");\n        &#125;\n        printf(\"\\n\");\n    &#125;\n    for (i = n - 1; i >= 1; --i) &#123;\n        for (j = 1; j &lt;= n - i; ++j) &#123;\n            printf(\" \");\n        &#125;\n        for (k = 1; k &lt;= 2 * i - 1; ++k) &#123;\n            printf(\"*\");\n        &#125;\n        printf(\"\\n\");\n    &#125;\n    return 0;\n&#125;\n\n递归方式的斐波那契数列#include &lt;stdio.h>\n\nint fibonacci(int n) &#123;\n    if (n == 0 || n == 1) &#123;\n        return n;\n    &#125; else &#123;\n        return fibonacci(n - 1) + fibonacci(n - 2);\n    &#125;\n&#125;\n\nint main() &#123;\n    int n, i;\n    printf(\"请输入要计算的斐波那契数列的项数：\");\n    scanf(\"%d\", &amp;n);\n    printf(\"斐波那契数列的前 %d 项为：\", n);\n    for (i = 0; i &lt; n; ++i) &#123;\n        printf(\"%d \", fibonacci(i));\n    &#125;\n    printf(\"\\n\");\n    return 0;\n&#125;\n\n计算公式p&#x3D;m!&#x2F;n!(m-n)!#include &lt;stdio.h>\n\nint main() &#123;\n    int m, n, i;\n    double p = 1;\n    printf(\"请输入m和n的值，用逗号隔开：\");\n    scanf(\"%d,%d\", &amp;m, &amp;n);\n    if (m &lt; n) &#123;\n        printf(\"m必须大于等于n！\\n\");\n        return 0;\n    &#125;\n    for (i = 1; i &lt;= n; ++i) &#123;\n        p *= (m - i + 1) * 1.0 / i;\n    &#125;\n    printf(\"p的值为：%lf\\n\", p);\n    return 0;\n&#125;\n\n使用递归的方式逆转字符#include &lt;stdio.h>\n#include &lt;string.h>\n\nvoid reverse_printf(const char *str)\n&#123;\n    if(str==NULL || *str=='\\0')\n    &#123;\n        return;\n    &#125;\n    reverse_printf(str+1);\n    printf(\"%c\",*str);\n&#125;\n\nint main()\n&#123;\n    char *a=\"hello,world!\";\n    reverse_printf(a);\n    printf(\"\\n\");\n    return 0;\n&#125;\n\n转换字符大小写#include &lt;stdio.h>\n#include &lt;string.h>\n\nint main() &#123;\n    char str[100];\n    int i;\n    printf(\"请输入一个字符串：\");\n    scanf(\"%s\", str);\n    for (i = 0; str[i] != '\\0'; ++i) &#123;\n        if (str[i] >= 'a' &amp;&amp; str[i] &lt;= 'z') &#123;\n            str[i] = str[i] &amp; 0xDF;\n        &#125; else if (str[i] >= 'A' &amp;&amp; str[i] &lt;= 'Z') &#123;\n            str[i] = str[i] | 0x20;\n        &#125;\n    &#125;\n    printf(\"转换后的字符串为：%s\\n\", str);\n    return 0;\n&#125;\n\n冒泡法排序#include &lt;stdio.h>\n\nint main() &#123;\n    int a[] = &#123;900, 2, 3, -58, 34, 76, 32, 43, 56, -70, 35, -234, 532, 543, 2500&#125;;\n    int n = sizeof(a) / sizeof(int);\n    int i, j, buf;\n    for (i = 0; i &lt; n - 1; ++i) &#123;\n        for (j = 0; j &lt; n - 1 - i; ++j) &#123;\n            if (a[j] &lt; a[j + 1]) &#123;\n                buf = a[j];\n                a[j] = a[j + 1];\n\t\t        a[j + 1] = buf;\n            &#125;\n        &#125;\n    &#125;\n    printf(\"排序后的结果为：\");\n    for (i = 0; i &lt; n; ++i) &#123;\n        printf(\"%d \", a[i]);\n    &#125;\n    printf(\"\\n\");\n    return 0;\n&#125;\n我们把函数提取出来为\n#include &lt;stdio.h> \nvoid bubble_sort(int arr[], int n) &#123; \n    for(int i = 0; i &lt; n-1; i++); &#123;\n        for(int j = 0; j &lt; n-i-1; j++) &#123;\n            if(arr[j] > arr[j+1]) &#123;\n                // 交换 arr[j] 和 arr[j+1]\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n打印杨辉三角#include &lt;stdio.h>\n\nint main() &#123;\n    int n, i, j;\n    printf(\"请输入要打印的行数：\");\n    scanf(\"%d\", &amp;n);\n    int a[n][n];\n    for (i = 0; i &lt; n; ++i) &#123;\n        for (j = 0; j &lt;= i; ++j) &#123;\n            if (j == 0 || j == i) &#123;\n                a[i][j] = 1;\n            &#125; else &#123;\n                a[i][j] = a[i - 1][j - 1] + a[i - 1][j];\n            &#125;\n            printf(\"%d \", a[i][j]);\n        &#125;\n        printf(\"\\n\");\n    &#125;\n    return 0;\n&#125;\n","tags":["汇编语言"]},{"title":"AES算法","url":"/2023/12/09/AES%E7%AE%97%E6%B3%95/","content":"高级加密标准（英语：Advanced Encryption Standard，[缩写]：AES），在[密码学]中又称Rijndael加密法，是[美国联邦政府]采用的一种[区块加密]标准。这个标准用来替代原先的[DES]，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由[美国国家标准与技术研究院]（NIST）于2001年11月26日发布于FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为[对称密钥加密]中最流行的[算法]之一。\n摘自Wikipedia以下是AES所用到的列表:\nAES-S-box\n\n\n\n行&#x2F;列\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nA\nB\nC\nD\nE\nF\n\n\n\n0\n0x63\n0x7c\n0x77\n0x7b\n0xf2\n0x6b\n0x6f\n0xc5\n0x30\n0x01\n0x67\n0x2b\n0xfe\n0xd7\n0xab\n0x76\n\n\n1\n0xca\n0x82\n0xc9\n0x7d\n0xfa\n0x59\n0x47\n0xf0\n0xad\n0xd4\n0xa2\n0xaf\n0x9c\n0xa4\n0x72\n0xc0\n\n\n2\n0xb7\n0xfd\n0x93\n0x26\n0x36\n0x3f\n0xf7\n0xcc\n0x34\n0xa5\n0xe5\n0xf1\n0x71\n0xd8\n0x31\n0x15\n\n\n3\n0x04\n0xc7\n0x23\n0xc3\n0x18\n0x96\n0x05\n0x9a\n0x07\n0x12\n0x80\n0xe2\n0xeb\n0x27\n0xb2\n0x75\n\n\n4\n0x09\n0x83\n0x2c\n0x1a\n0x1b\n0x6e\n0x5a\n0xa0\n0x52\n0x3b\n0xd6\n0xb3\n0x29\n0xe3\n0x2f\n0x84\n\n\n5\n0x53\n0xd1\n0x00\n0xed\n0x20\n0xfc\n0xb1\n0x5b\n0x6a\n0xcb\n0xbe\n0x39\n0x4a\n0x4c\n0x58\n0xcf\n\n\n6\n0xd0\n0xef\n0xaa\n0xfb\n0x43\n0x4d\n0x33\n0x85\n0x45\n0xf9\n0x02\n0x7f\n0x50\n0x3c\n0x9f\n0xa8\n\n\n7\n0x51\n0xa3\n0x40\n0x8f\n0x92\n0x9d\n0x38\n0xf5\n0xbc\n0xb6\n0xda\n0x21\n0x10\n0xff\n0xf3\n0xd2\n\n\n8\n0xcd\n0x0c\n0x13\n0xec\n0x5f\n0x97\n0x44\n0x17\n0xc4\n0xa7\n0x7e\n0x3d\n0x64\n0x5d\n0x19\n0x73\n\n\n9\n0x60\n0x81\n0x4f\n0xdc\n0x22\n0x2a\n0x90\n0x88\n0x46\n0xee\n0xb8\n0x14\n0xde\n0x5e\n0x0b\n0xdb\n\n\nA\n0xe0\n0x32\n0x3a\n0x0a\n0x49\n0x06\n0x24\n0x5c\n0xc2\n0xd3\n0xac\n0x62\n0x91\n0x95\n0xe4\n0x79\n\n\nB\n0xe7\n0xc8\n0x37\n0x6d\n0x8d\n0xd5\n0x4e\n0xa9\n0x6c\n0x56\n0xf4\n0xea\n0x65\n0x7a\n0xae\n0x08\n\n\nC\n0xba\n0x78\n0x25\n0x2e\n0x1c\n0xa6\n0xb4\n0xc6\n0xe8\n0xdd\n0x74\n0x1f\n0x4b\n0xbd\n0x8b\n0x8a\n\n\nD\n0x70\n0x3e\n0xb5\n0x66\n0x48\n0x03\n0xf6\n0x0e\n0x61\n0x35\n0x57\n0xb9\n0x86\n0xc1\n0x1d\n0x9e\n\n\nE\n0xe1\n0xf8\n0x98\n0x11\n0x69\n0xd9\n0x8e\n0x94\n0x9b\n0x1e\n0x87\n0xe9\n0xce\n0x55\n0x28\n0xdf\n\n\nF\n0x8c\n0xa1\n0x89\n0x0d\n0xbf\n0xe6\n0x42\n0x68\n0x41\n0x99\n0x2d\n0x0f\n0xb0\n0x54\n0xbb\n0x16\n\n\n逆S盒unsigned char inv_S[256] &#x3D; { 0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E, 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D };\n分组密码有五种工作体制：1.电码本模式（Electronic Codebook Book (ECB)）；2.密码分组链接模式（Cipher Block Chaining (CBC)）；3.计算器模式（Counter (CTR)）；4.密码反馈模式（Cipher FeedBack (CFB)）；5.输出反馈模式（Output FeedBack (OFB)）。\nAES算法的流程字节替换,根据字节替换表对初始的数值进行替换,行移位,对每一行的替换后的数据进行位移,\n#include &lt;stdio.h&gt;\n\n#include &lt;stdint.h&gt;\n\n#include &lt;memory.h&gt;\n\ntypedef enum &#123;\n\nAES_CYPHER_128,\n\nAES_CYPHER_192,\n\nAES_CYPHER_256,\n\n&#125; AES_CYPHER_T;\n\n&#x2F;*\n\n* Encryption Rounds\n\n*&#x2F;\n\nint g_aes_key_bits[] &#x3D; &#123;\n\n&#x2F;* AES_CYPHER_128 *&#x2F; 128,\n\n&#x2F;* AES_CYPHER_192 *&#x2F; 192,\n\n&#x2F;* AES_CYPHER_256 *&#x2F; 256,\n\n&#125;;\n\nint g_aes_rounds[] &#x3D; &#123;\n\n&#x2F;* AES_CYPHER_128 *&#x2F; 10,\n\n&#x2F;* AES_CYPHER_192 *&#x2F; 12,\n\n&#x2F;* AES_CYPHER_256 *&#x2F; 14,\n\n&#125;;\n\nint g_aes_nk[] &#x3D; &#123;\n\n&#x2F;* AES_CYPHER_128 *&#x2F; 4,\n\n&#x2F;* AES_CYPHER_192 *&#x2F; 6,\n\n&#x2F;* AES_CYPHER_256 *&#x2F; 8,\n\n&#125;;\n\nint g_aes_nb[] &#x3D; &#123;\n\n&#x2F;* AES_CYPHER_128 *&#x2F; 4,\n\n&#x2F;* AES_CYPHER_192 *&#x2F; 4,\n\n&#x2F;* AES_CYPHER_256 *&#x2F; 4,\n\n&#125;;\n\n&#x2F;*\n\n* aes Rcon:\n\n*\n\n* WARNING: Rcon is designed starting from 1 to 15, not 0 to 14.\n\n* FIPS-197 Page 9: &quot;note that i starts at 1, not 0&quot;\n\n*\n\n* i | 0 1 2 3 4 5 6 7 8 9 10 11\n\n12 13 14\n\n* -----+---------------------------------------------------------------------\n\n---------------------\n\n* | [01] [02] [04] [08] [10] [20] [40] [80] [1b] [36] [6c] [d8] [ab]\n\n[4d] [9a]\n\n* RCON | [00] [00] [00] [00] [00] [00] [00] [00] [00] [00] [00] [00] [00]\n\n[00] [00]\n\n* | [00] [00] [00] [00] [00] [00] [00] [00] [00] [00] [00] [00] [00]\n\n[00] [00]\n\n* | [00] [00] [00] [00] [00] [00] [00] [00] [00] [00] [00] [00] [00]\n\n[00] [00]\n\n*&#x2F;\n\nstatic const uint32_t g_aes_rcon[] &#x3D; &#123;\n\n0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000,\n\n0x40000000, 0x80000000,\n\n0x1b000000, 0x36000000, 0x6c000000, 0xd8000000, 0xab000000, 0xed000000,\n\n0x9a000000\n\n&#125;;\n\n&#x2F;*\n\n* aes sbox and invert-sbox\n\n*&#x2F;\n\nstatic const uint8_t g_aes_sbox[256] &#x3D; &#123;\n\n&#x2F;* 0 1 2 3 4 5 6 7 8 9 A B\n\nC D E F *&#x2F;\n\n0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab,\n\n0x76,\n\n0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72,\n\n0xc0,\n\n0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31,\n\n0x15,\n\n0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2,\n\n0x75,\n\n0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f,\n\n0x84,\n\n0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58,\n\n0xcf,\n\n0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f,\n\n0xa8,\n\n0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3,\n\n0xd2,\n\n0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,\n\n0x73,\n\n0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b,\n\n0xdb,\n\n0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4,\n\n0x79,\n\n0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae,\n\n0x08,\n\n0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b,\n\n0x8a,\n\n0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d,\n\n0x9e,\n\n0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28,\n\n0xdf,\n\n0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb,\n\n0x16\n\n&#125;;\n\nstatic const uint8_t g_inv_sbox[256] &#x3D; &#123;\n\n&#x2F;* 0 1 2 3 4 5 6 7 8 9 A B\n\nC D E F *&#x2F;\n\n0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7,\n\n0xfb,\n\n0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9,\n\n0xcb,\n\n0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3,\n\n0x4e,\n\n0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b,\n\n0xd1, 0x25,\n\n0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6,\n\n0x92,\n\n0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d,\n\n0x84,\n\n0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45,\n\n0x06,\n\n0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a,\n\n0x6b,\n\n0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,\n\n0x73,\n\n0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf,\n\n0x6e,\n\n0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe,\n\n0x1b,\n\n0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a,\n\n0xf4,\n\n0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec,\n\n0x5f,\n\n0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c,\n\n0xef,\n\n0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99,\n\n0x61,\n\n0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21,\n\n0x0c, 0x7d\n\n&#125;;\n\nuint8_t aes_sub_sbox(uint8_t val)\n\n&#123;\n\nreturn g_aes_sbox[val];\n\n&#125;\n\nuint32_t aes_sub_dword(uint32_t val)\n\n&#123;\n\nuint32_t tmp &#x3D; 0;\n\ntmp |&#x3D; ((uint32_t)aes_sub_sbox((uint8_t)((val &gt;&gt; 0) &amp; 0xFF))) &lt;&lt; 0;\n\ntmp |&#x3D; ((uint32_t)aes_sub_sbox((uint8_t)((val &gt;&gt; 8) &amp; 0xFF))) &lt;&lt; 8;\n\ntmp |&#x3D; ((uint32_t)aes_sub_sbox((uint8_t)((val &gt;&gt; 16) &amp; 0xFF))) &lt;&lt; 16;\n\ntmp |&#x3D; ((uint32_t)aes_sub_sbox((uint8_t)((val &gt;&gt; 24) &amp; 0xFF))) &lt;&lt; 24;\n\nreturn tmp;\n\n&#125;\n\nuint32_t aes_rot_dword(uint32_t val)\n\n&#123;\n\nuint32_t tmp &#x3D; val;\n\nreturn (val &gt;&gt; 8) | ((tmp &amp; 0xFF) &lt;&lt; 24);\n\n&#125;\n\nuint32_t aes_swap_dword(uint32_t val)\n\n&#123;\n\nreturn (((val &amp; 0x000000FF) &lt;&lt; 24) |\n\n((val &amp; 0x0000FF00) &lt;&lt; 8) |\n\n((val &amp; 0x00FF0000) &gt;&gt; 8) |\n\n((val &amp; 0xFF000000) &gt;&gt; 24));\n\n&#125;\n\n&#x2F;*\n\n* nr: number of rounds\n\n* nb: number of columns comprising the state, nb &#x3D; 4 dwords (16 bytes)\n\n* nk: number of 32-bit words comprising cipher key, nk &#x3D; 4, 6, 8 (KeyLength&#x2F;(4*8))\n\n*&#x2F;\n\nvoid aes_key_expansion(AES_CYPHER_T mode, uint8_t *key, uint8_t *round)\n\n&#123;\n\nuint32_t *w &#x3D; (uint32_t *)round;\n\nuint32_t t;\n\nint i &#x3D; 0;\n\ndo &#123;\n\nw[i] &#x3D; *((uint32_t *)&amp;key[i * 4 + 0]);\n\n&#125; while (++i &lt; g_aes_nk[mode]);\n\ndo &#123;\n\nif ((i % g_aes_nk[mode]) &#x3D;&#x3D; 0) &#123;\n\nt &#x3D; aes_rot_dword(w[i - 1]);\n\nt &#x3D; aes_sub_dword(t);\n\nt &#x3D; t ^ aes_swap_dword(g_aes_rcon[i &#x2F; g_aes_nk[mode] - 1]);\n\n&#125;\n\nelse if (g_aes_nk[mode] &gt; 6 &amp;&amp; (i % g_aes_nk[mode]) &#x3D;&#x3D; 4) &#123;\n\nt &#x3D; aes_sub_dword(w[i - 1]);\n\n&#125;\n\nelse &#123;\n\nt &#x3D; w[i - 1];\n\n&#125;\n\nw[i] &#x3D; w[i - g_aes_nk[mode]] ^ t;\n\n&#125; while (++i &lt; g_aes_nb[mode] * (g_aes_rounds[mode] + 1));\n\n&#125;\n\nvoid aes_add_round_key(AES_CYPHER_T mode, uint8_t *state,uint8_t *round, int nr)\n\n&#123;\n\nuint32_t *w &#x3D; (uint32_t *)round;\n\nuint32_t *s &#x3D; (uint32_t *)state;\n\nint i;\n\nfor (i &#x3D; 0; i &lt; g_aes_nb[mode]; i++) &#123;\n\ns[i] ^&#x3D; w[nr * g_aes_nb[mode] + i];\n\n&#125; &#125;\n\nvoid aes_sub_bytes(AES_CYPHER_T mode, uint8_t *state)\n\n&#123;\n\nint i, j;\n\nfor (i &#x3D; 0; i &lt; g_aes_nb[mode]; i++) &#123;\n\nfor (j &#x3D; 0; j &lt; 4; j++) &#123;\n\nstate[i * 4 + j] &#x3D; aes_sub_sbox(state[i * 4 + j]);\n\n&#125; &#125; &#125;\n\nvoid aes_shift_rows(AES_CYPHER_T mode, uint8_t *state)\n\n&#123;\n\nuint8_t *s &#x3D; (uint8_t *)state;\n\nint i, j, r;\n\nfor (i &#x3D; 1; i &lt; g_aes_nb[mode]; i++) &#123;\n\nfor (j &#x3D; 0; j &lt; i; j++) &#123;\n\nuint8_t tmp &#x3D; s[i];\n\nfor (r &#x3D; 0; r &lt; g_aes_nb[mode]; r++) &#123;\n\ns[i + r * 4] &#x3D; s[i + (r + 1) * 4];\n\n&#125;\n\ns[i + (g_aes_nb[mode] - 1) * 4] &#x3D; tmp;\n\n&#125; &#125; &#125;\n\nuint8_t aes_xtime(uint8_t x)\n\n&#123;\n\nreturn ((x &lt;&lt; 1) ^ (((x &gt;&gt; 7) &amp; 1) * 0x1b));\n\n&#125;\n\nuint8_t aes_xtimes(uint8_t x, int ts)\n\n&#123;\n\nwhile (ts-- &gt; 0) &#123;\n\nx &#x3D; aes_xtime(x);\n\n&#125;\n\nreturn x;\n\n&#125;\n\nuint8_t aes_mul(uint8_t x, uint8_t y)\n\n&#123;\n\n&#x2F;*\n\n* encrypt: y has only 2 bits: can be 1, 2 or 3\n\n* decrypt: y could be any value of 9, b, d, or e\n\n*&#x2F;\n\nreturn ((((y &gt;&gt; 0) &amp; 1) * aes_xtimes(x, 0)) ^\n\n(((y &gt;&gt; 1) &amp; 1) * aes_xtimes(x, 1)) ^\n\n(((y &gt;&gt; 2) &amp; 1) * aes_xtimes(x, 2)) ^\n\n(((y &gt;&gt; 3) &amp; 1) * aes_xtimes(x, 3)) ^\n\n(((y &gt;&gt; 4) &amp; 1) * aes_xtimes(x, 4)) ^\n\n(((y &gt;&gt; 5) &amp; 1) * aes_xtimes(x, 5)) ^\n\n(((y &gt;&gt; 6) &amp; 1) * aes_xtimes(x, 6)) ^\n\n(((y &gt;&gt; 7) &amp; 1) * aes_xtimes(x, 7)));\n\n&#125;\n\nvoid aes_mix_columns(AES_CYPHER_T mode, uint8_t *state)\n\n&#123;\n\nuint8_t y[16] &#x3D; &#123; 2, 3, 1, 1, 1, 2, 3, 1, 1, 1, 2, 3, 3, 1, 1, 2 &#125;;\n\nuint8_t s[4];\n\nint i, j, r;\n\nfor (i &#x3D; 0; i &lt; g_aes_nb[mode]; i++) &#123;\n\nfor (r &#x3D; 0; r &lt; 4; r++) &#123;\n\ns[r] &#x3D; 0;\n\nfor (j &#x3D; 0; j &lt; 4; j++) &#123;\n\ns[r] &#x3D; s[r] ^ aes_mul(state[i * 4 + j], y[r * 4 + j]);\n\n&#125; &#125;\n\nfor (r &#x3D; 0; r &lt; 4; r++) &#123;\n\nstate[i * 4 + r] &#x3D; s[r];\n\n&#125; &#125; &#125;\n\nint aes_encrypt(AES_CYPHER_T mode, uint8_t *data, int len, uint8_t *key)\n\n&#123;\n\nuint8_t w[4 * 4 * 15] &#x3D; &#123; 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,\n\n 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x72, 0x7C, 0x01, 0xC8,\n\n 0x46, 0x49, 0x37, 0xFF, 0x7E, 0x70, 0x56, 0x9D, 0x1D, 0x14,\n\n 0x33, 0xFB, 0x8A, 0xBF, 0x0E, 0x6C, 0xCC, 0xF6, 0x39, 0x93,\n\n 0xB2, 0x86, 0x6F, 0x0E, 0xAF, 0x92, 0x5C, 0xF5, 0xC1, 0xF5,\n\n 0xE8, 0x15, 0x0D, 0x03, 0xD1, 0x86, 0xBF, 0x85, 0xBE, 0x88,\n\n 0x10, 0x17, 0xE2, 0x7D, 0x39, 0x6D, 0x17, 0xDF, 0x34, 0x6E,\n\n 0xC6, 0x59, 0x8B, 0xEB, 0x78, 0xD1, 0x9B, 0xFC, 0x9A, 0xAC,\n\n 0x99, 0xD5, 0x86, 0xCB, 0xAD, 0xBB, 0x40, 0x92, 0x26, 0x50,\n\n 0x38, 0x43, 0xBD, 0xAC, 0xA2, 0xEF, 0x28, 0xEF, 0x59, 0xB1,\n\n 0x85, 0x54, 0x19, 0x23, 0xA3, 0x04, 0x21, 0x60, 0x1E, 0xA8,\n\n 0x83, 0x8F, 0xAA, 0x03, 0x2A, 0xC3, 0x2F, 0x57, 0x33, 0xE0,\n\n 0x8C, 0x53, 0x12, 0x80, 0x92, 0xFB, 0x91, 0x0F, 0x25, 0x82,\n\n 0x5C, 0x8C, 0x0A, 0xD5, 0x6F, 0x6C, 0x86, 0x86, 0x7D, 0xEC,\n\n 0x14, 0x7D, 0xEC, 0xE3, 0xEC, 0x4C, 0x4D, 0x76, 0xE6, 0x99,\n\n 0x22, 0x1A, 0x60, 0x1F, 0x5F, 0xF6, 0x74, 0x62, 0xB3, 0x15,\n\n 0x5D, 0x21, 0x14, 0xE4, 0xBB, 0xB8, 0x36, 0xFE, 0xDB, 0xA7,\n\n 0x69, 0x08, 0xAF, 0xC5, 0xDA, 0x1D &#125;; &#x2F;* round key *&#x2F;\n\nuint8_t s[4 * 4] &#x3D; &#123; 0 &#125;; &#x2F;* state *&#x2F;\n\nint nr, i, j;\n\n&#x2F;* key expansion *&#x2F;\n\n&#x2F;&#x2F; aes_key_expansion(mode, key, w);\n\n&#x2F;* start data cypher loop over input buffer *&#x2F;\n\nfor (i &#x3D; 0; i &lt; len; i +&#x3D; 4 * g_aes_nb[mode]) &#123;\n\n&#x2F;* init state from user buffer (plaintext) *&#x2F;\n\nfor (j &#x3D; 0; j &lt; 4 * g_aes_nb[mode]; j++)\n\ns[j] &#x3D; data[i + j];\n\n&#x2F;* start AES cypher loop over all AES rounds *&#x2F;\n\nfor (nr &#x3D; 0; nr &lt;&#x3D; g_aes_rounds[mode]; nr++) &#123;\n\nif (nr &gt; 0) &#123;\n\n&#x2F;* do SubBytes *&#x2F;\n\naes_sub_bytes(mode, s);\n\n&#x2F;* do ShiftRows *&#x2F;\n\naes_shift_rows(mode, s);\n\nif (nr &lt; g_aes_rounds[mode]) &#123;\n\n&#x2F;* do MixColumns *&#x2F;\n\naes_mix_columns(mode, s);\n\n&#125; &#125;\n\n&#x2F;* do AddRoundKey *&#x2F;\n\naes_add_round_key(mode, s, w, nr);\n\n&#125;\n\n&#x2F;* save state (cypher) to user buffer *&#x2F;\n\nfor (j &#x3D; 0; j &lt; 4 * g_aes_nb[mode]; j++)\n\ndata[i + j] &#x3D; s[j];\n\n&#125;\n\nreturn 0;\n\n&#125;\n\nint aes_encrypt_ecb(AES_CYPHER_T mode, uint8_t *data, int len, uint8_t *key)\n\n&#123;\n\nreturn aes_encrypt(mode, data, len, key);\n\n&#125;\n\nint aes_encrypt_cbc(AES_CYPHER_T mode, uint8_t *data, int len, uint8_t *key, uint8_t *iv)\n\n&#123;\n\nuint8_t w[4 * 4 * 15] &#x3D; &#123; 0 &#125;; &#x2F;* round key *&#x2F;\n\nuint8_t s[4 * 4] &#x3D; &#123; 0 &#125;; &#x2F;* state *&#x2F;\n\nuint8_t v[4 * 4] &#x3D; &#123; 0 &#125;; &#x2F;* iv *&#x2F;\n\nint nr, i, j;\n\n&#x2F;* key expansion *&#x2F;\n\naes_key_expansion(mode, key, w);\n\nmemcpy(v, iv, sizeof(v));\n\n&#x2F;* start data cypher loop over input buffer *&#x2F;\n\nfor (i &#x3D; 0; i &lt; len; i +&#x3D; 4 * g_aes_nb[mode]) &#123;\n\n&#x2F;* init state from user buffer (plaintext) *&#x2F;\n\nfor (j &#x3D; 0; j &lt; 4 * g_aes_nb[mode]; j++)\n\ns[j] &#x3D; data[i + j] ^ v[j];\n\n&#x2F;* start AES cypher loop over all AES rounds *&#x2F;\n\nfor (nr &#x3D; 0; nr &lt;&#x3D; g_aes_rounds[mode]; nr++) &#123;\n\nif (nr &gt; 0) &#123;\n\n&#x2F;* do SubBytes *&#x2F;\n\naes_sub_bytes(mode, s);\n\n&#x2F;* do ShiftRows *&#x2F;\n\naes_shift_rows(mode, s);\n\nif (nr &lt; g_aes_rounds[mode]) &#123;\n\n&#x2F;* do MixColumns *&#x2F;\n\naes_mix_columns(mode, s);\n\n&#125; &#125;\n\n&#x2F;* do AddRoundKey *&#x2F;\n\naes_add_round_key(mode, s, w, nr);\n\n&#125;\n\n&#x2F;* save state (cypher) to user buffer *&#x2F;\n\nfor (j &#x3D; 0; j &lt; 4 * g_aes_nb[mode]; j++)\n\ndata[i + j] &#x3D; v[j] &#x3D; s[j];\n\n&#125;\n\nreturn 0;\n\n&#125;\n\nvoid inv_shift_rows(AES_CYPHER_T mode, uint8_t *state)\n\n&#123;\n\nuint8_t *s &#x3D; (uint8_t *)state;\n\nint i, j, r;\n\nfor (i &#x3D; 1; i &lt; g_aes_nb[mode]; i++) &#123;\n\nfor (j &#x3D; 0; j &lt; g_aes_nb[mode] - i; j++) &#123;\n\nuint8_t tmp &#x3D; s[i];\n\nfor (r &#x3D; 0; r &lt; g_aes_nb[mode]; r++) &#123;\n\ns[i + r * 4] &#x3D; s[i + (r + 1) * 4];\n\n&#125;\n\ns[i + (g_aes_nb[mode] - 1) * 4] &#x3D; tmp;\n\n&#125; &#125; &#125;\n\nuint8_t inv_sub_sbox(uint8_t val)\n\n&#123;\n\nreturn g_inv_sbox[val];\n\n&#125;\n\nvoid inv_sub_bytes(AES_CYPHER_T mode, uint8_t *state)\n\n&#123;\n\nint i, j;\n\nfor (i &#x3D; 0; i &lt; g_aes_nb[mode]; i++) &#123;\n\nfor (j &#x3D; 0; j &lt; 4; j++) &#123;\n\nstate[i * 4 + j] &#x3D; inv_sub_sbox(state[i * 4 + j]);\n\n&#125; &#125; &#125;\n\nvoid inv_mix_columns(AES_CYPHER_T mode, uint8_t *state)\n\n&#123;\n\nuint8_t y[16] &#x3D; &#123; 0x0e, 0x0b, 0x0d, 0x09, 0x09, 0x0e, 0x0b, 0x0d,\n\n0x0d, 0x09, 0x0e, 0x0b, 0x0b, 0x0d, 0x09, 0x0e &#125;;\n\nuint8_t s[4];\n\nint i, j, r;\n\nfor (i &#x3D; 0; i &lt; g_aes_nb[mode]; i++) &#123;\n\nfor (r &#x3D; 0; r &lt; 4; r++) &#123;\n\ns[r] &#x3D; 0;\n\nfor (j &#x3D; 0; j &lt; 4; j++) &#123;\n\ns[r] &#x3D; s[r] ^ aes_mul(state[i * 4 + j], y[r * 4 + j]);\n\n&#125; &#125;\n\nfor (r &#x3D; 0; r &lt; 4; r++) &#123;\n\nstate[i * 4 + r] &#x3D; s[r];\n\n&#125; &#125; &#125;\n\nint aes_decrypt(AES_CYPHER_T mode, uint8_t *data, int len, uint8_t *key)\n\n&#123;\n\nuint8_t w[4 * 4 * 15] &#x3D; &#123; 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,\n\n 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x72, 0x7C, 0x01, 0xC8,\n\n 0x46, 0x49, 0x37, 0xFF, 0x7E, 0x70, 0x56, 0x9D, 0x1D, 0x14,\n\n 0x33, 0xFB, 0x8A, 0xBF, 0x0E, 0x6C, 0xCC, 0xF6, 0x39, 0x93,\n\n 0xB2, 0x86, 0x6F, 0x0E, 0xAF, 0x92, 0x5C, 0xF5, 0xC1, 0xF5,\n\n 0xE8, 0x15, 0x0D, 0x03, 0xD1, 0x86, 0xBF, 0x85, 0xBE, 0x88,\n\n 0x10, 0x17, 0xE2, 0x7D, 0x39, 0x6D, 0x17, 0xDF, 0x34, 0x6E,\n\n 0xC6, 0x59, 0x8B, 0xEB, 0x78, 0xD1, 0x9B, 0xFC, 0x9A, 0xAC,\n\n 0x99, 0xD5, 0x86, 0xCB, 0xAD, 0xBB, 0x40, 0x92, 0x26, 0x50,\n\n 0x38, 0x43, 0xBD, 0xAC, 0xA2, 0xEF, 0x28, 0xEF, 0x59, 0xB1,\n\n 0x85, 0x54, 0x19, 0x23, 0xA3, 0x04, 0x21, 0x60, 0x1E, 0xA8,\n\n 0x83, 0x8F, 0xAA, 0x03, 0x2A, 0xC3, 0x2F, 0x57, 0x33, 0xE0,\n\n 0x8C, 0x53, 0x12, 0x80, 0x92, 0xFB, 0x91, 0x0F, 0x25, 0x82,\n\n 0x5C, 0x8C, 0x0A, 0xD5, 0x6F, 0x6C, 0x86, 0x86, 0x7D, 0xEC,\n\n 0x14, 0x7D, 0xEC, 0xE3, 0xEC, 0x4C, 0x4D, 0x76, 0xE6, 0x99,\n\n 0x22, 0x1A, 0x60, 0x1F, 0x5F, 0xF6, 0x74, 0x62, 0xB3, 0x15,\n\n 0x5D, 0x21, 0x14, 0xE4, 0xBB, 0xB8, 0x36, 0xFE, 0xDB, 0xA7,\n\n 0x69, 0x08, 0xAF, 0xC5, 0xDA, 0x1D &#125;; &#x2F;* round key *&#x2F;\n\nuint8_t s[4 * 4] &#x3D; &#123; 0 &#125;; &#x2F;* state *&#x2F;\n\nint nr, i, j;\n\n&#x2F;* key expansion *&#x2F;\n\n&#x2F;&#x2F; aes_key_expansion(mode, key, w);\n\n&#x2F;* start data cypher loop over input buffer *&#x2F;\n\nfor (i &#x3D; 0; i &lt; len; i +&#x3D; 4 * g_aes_nb[mode]) &#123;\n\n&#x2F;* init state from user buffer (cyphertext) *&#x2F;\n\nfor (j &#x3D; 0; j &lt; 4 * g_aes_nb[mode]; j++)\n\ns[j] &#x3D; data[i + j];\n\n&#x2F;* start AES cypher loop over all AES rounds *&#x2F;\n\nfor (nr &#x3D; g_aes_rounds[mode]; nr &gt;&#x3D; 0; nr--) &#123;\n\n&#x2F;* do AddRoundKey *&#x2F;\n\naes_add_round_key(mode, s, w, nr);\n\nif (nr &gt; 0) &#123;\n\nif (nr &lt; g_aes_rounds[mode]) &#123;\n\n&#x2F;* do MixColumns *&#x2F;\n\ninv_mix_columns(mode, s);\n\n&#125;\n\n&#x2F;* do ShiftRows *&#x2F;\n\ninv_shift_rows(mode, s);\n\n&#x2F;* do SubBytes *&#x2F;\n\ninv_sub_bytes(mode, s);\n\n&#125; &#125;\n\n&#x2F;* save state (cypher) to user buffer *&#x2F;\n\nfor (j &#x3D; 0; j &lt; 4 * g_aes_nb[mode]; j++)\n\ndata[i + j] &#x3D; s[j];\n\n&#125;\n\nreturn 0;\n\n&#125;\n\nint aes_decrypt_ecb(AES_CYPHER_T mode, uint8_t *data, int len, uint8_t *key)\n\n&#123;\n\nreturn aes_decrypt(mode, data, len, key);\n\n&#125;\n\nint aes_decrypt_cbc(AES_CYPHER_T mode, uint8_t *data, int len, uint8_t *key, uint8_t *iv)\n\n&#123;\n\nuint8_t w[4 * 4 * 15] &#x3D; &#123; 0 &#125;; &#x2F;* round key *&#x2F;\n\nuint8_t s[4 * 4] &#x3D; &#123; 0 &#125;; &#x2F;* state *&#x2F;\n\nuint8_t v[4 * 4] &#x3D; &#123; 0 &#125;; &#x2F;* iv *&#x2F;\n\nint nr, i, j;\n\n&#x2F;* key expansion *&#x2F;\n\naes_key_expansion(mode, key, w);\n\nmemcpy(v, iv, sizeof(v));\n\n&#x2F;* start data cypher loop over input buffer *&#x2F;\n\nfor (i &#x3D; 0; i &lt; len; i +&#x3D; 4 * g_aes_nb[mode]) &#123;\n\n&#x2F;* init state from user buffer (cyphertext) *&#x2F;\n\nfor (j &#x3D; 0; j &lt; 4 * g_aes_nb[mode]; j++)\n\ns[j] &#x3D; data[i + j];\n\n&#x2F;* start AES cypher loop over all AES rounds *&#x2F;\n\nfor (nr &#x3D; g_aes_rounds[mode]; nr &gt;&#x3D; 0; nr--) &#123;\n\n&#x2F;* do AddRoundKey *&#x2F;\n\naes_add_round_key(mode, s, w, nr);\n\nif (nr &gt; 0) &#123;\n\nif (nr &lt; g_aes_rounds[mode]) &#123;\n\n&#x2F;* do MixColumns *&#x2F;\n\ninv_mix_columns(mode, s);\n\n&#125;\n\n&#x2F;* do ShiftRows *&#x2F;\n\ninv_shift_rows(mode, s);\n\n&#x2F;* do SubBytes *&#x2F;\n\ninv_sub_bytes(mode, s);\n\n&#125; &#125;\n\n&#x2F;* save state (cypher) to user buffer *&#x2F;\n\nfor (j &#x3D; 0; j &lt; 4 * g_aes_nb[mode]; j++) &#123;\n\nuint8_t p &#x3D; s[j] ^ v[j];\n\nv[j] &#x3D; data[i + j];\n\ndata[i + j] &#x3D; p;\n\n&#125; &#125;\n\nreturn 0;\n\n&#125;\n\nint main()\n\n&#123;\n\n&#x2F;&#x2F;数据\n\nuint8_t buf[] &#x3D; &#123; 0xD1, 0xF7, 0xB4, 0x67, 0x72, 0x1E, 0x25, 0xBA, 0x44, 0x79,\n\n 0x2D, 0xC5, 0xFC, 0x9A, 0xCF, 0x00, 0xA9, 0xA8, 0xF9, 0xED,\n\n 0x4D, 0x0E, 0x74, 0x61, 0xB8, 0x17, 0x8D, 0x8F, 0xFD, 0x6D,\n\n 0x1E, 0x65 &#125;;\n\n&#x2F;&#x2F;密钥\n\nuint8_t key[] &#x3D;\n\n&#123; 0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x61,0x62,0x63,0x64,0x65,0x66 &#125;;\n\n&#x2F;&#x2F;向量\n\nuint8_t iv[] &#x3D;\n\n&#123; 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10 &#125;;\n\n&#x2F;&#x2F;模式 1-ECB 0-CBC\n\nbool ecb_or_cbc &#x3D; 1;\n\n&#x2F;&#x2F;加解密 1-加密 0-解密\n\nbool en_or_de &#x3D; 0;\n\n&#x2F;&#x2F;ECB 模式加密\n\nif(ecb_or_cbc&amp;&amp;en_or_de)\n\n&#123;\n\nswitch (sizeof(key))\n\n&#123;\n\ncase 16:aes_encrypt(AES_CYPHER_128, buf, sizeof(buf), key); break;\n\ncase 24:aes_encrypt(AES_CYPHER_192, buf, sizeof(buf), key); break;\n\ncase 32:aes_encrypt(AES_CYPHER_256, buf, sizeof(buf), key); break;\n\n&#125;\n\n&#x2F;&#x2F;打印数据\n\nfor (int i &#x3D; 0; i &lt; sizeof(buf); i++)\n\n&#123;\n\nprintf(&quot;0x%02x,&quot;, buf[i] &amp; 0xFF);\n\n&#125; &#125;\n\n&#x2F;&#x2F;ECB 模式解密\n\nelse if(ecb_or_cbc&amp;&amp;(!en_or_de))\n\n&#123;\n\nswitch (sizeof(key))\n\n&#123;\n\ncase 16:aes_decrypt(AES_CYPHER_128, buf, sizeof(buf), key); break;\n\ncase 24:aes_decrypt(AES_CYPHER_192, buf, sizeof(buf), key); break;\n\ncase 32:aes_decrypt(AES_CYPHER_256, buf, sizeof(buf), key); break;\n\n&#125;\n\n&#x2F;&#x2F;打印数据\n\nfor (int i &#x3D; 0; i &lt; sizeof(buf); i++)\n\n&#123;\n\nprintf(&quot;%c&quot;, (buf[i] &amp; 0xFF)^0x66);\n\n&#125; &#125;\n\n&#x2F;&#x2F;CBC 模式加密\n\nelse if((!ecb_or_cbc)&amp;&amp;en_or_de)\n\n&#123;\n\nswitch (sizeof(key))\n\n&#123;\n\ncase 16:aes_encrypt_cbc(AES_CYPHER_128, buf, sizeof(buf), key, iv); break;\n\ncase 24:aes_encrypt_cbc(AES_CYPHER_192, buf, sizeof(buf), key, iv); break;\n\ncase 32:aes_encrypt_cbc(AES_CYPHER_256, buf, sizeof(buf), key, iv); break;\n\n&#125;\n\n&#x2F;&#x2F;打印数据\n\nfor (int i &#x3D; 0; i &lt; sizeof(buf); i++)\n\n&#123;\n\nprintf(&quot;0x%02x,&quot;, buf[i] &amp; 0xFF);\n\n&#125; &#125;\n\n&#x2F;&#x2F;CBC 模式解密\n\nelse\n\n&#123;\n\nswitch (sizeof(key))\n\n&#123;\n\ncase 16:aes_decrypt_cbc(AES_CYPHER_128, buf, sizeof(buf), key, iv); break;\n\ncase 24:aes_decrypt_cbc(AES_CYPHER_192, buf, sizeof(buf), key, iv); break;\n\ncase 32:aes_decrypt_cbc(AES_CYPHER_256, buf, sizeof(buf), key, iv); break;\n\n&#125;\n\n&#x2F;&#x2F;打印数据\n\nfor (int i &#x3D; 0; i &lt; sizeof(buf); i++)\n\n&#123;\n\nprintf(&quot;%c&quot;, buf[i] &amp; 0xFF);\n\n&#125; &#125;\n\nprintf(&quot;\\n&quot;);\n\nreturn 0;\n\n&#125;\n\n以上为ECB和CBC模式的解法.\n"},{"title":"TEA算法加密","url":"/2023/12/03/TEA%E7%AE%97%E6%B3%95%E5%8A%A0%E5%AF%86/","content":"TEA” 的全称为”Tiny Encryption Algorithm” 是1994年由英国剑桥大学的David j.wheeler发明的。TEA算法也算是一种微型加密算法的。在安全学领域，TEA（Tiny Encryption Algorithm）是一种分组加密算法.TEA算法使用64位的明文分组和128位的密钥，它使用Feistel分组加密框架，需要进行64轮迭代，但是作者认为32轮已经足够了，所以32轮迭代加密后最后得到的密文就是64位。简单的说就是,TEA加密解密是以原文以8字节（64位bit）为一组，密钥16字节（128位bit）为一组，（char为1字节，int为4字节，double为8字节），该算法加密轮次可变，作者建议为32轮，因为被加密的明文为64位，所以最终加密的结果也是64位.TEA算法的特征是delta值和16字节的密钥（128位）以及32轮迭代以下为tea算法的实现\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;Windows.h&gt;\n \nvoid Encrypt(long* EntryData, long* Key)\n&#123;\n    &#x2F;&#x2F;分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组\n    unsigned long x &#x3D; EntryData[0];\n    unsigned long y &#x3D; EntryData[1];\n \n    unsigned long sum &#x3D; 0;\n    unsigned long delta &#x3D; 0x9E3779B9;\n    &#x2F;&#x2F;总共加密32轮\n    for (int i &#x3D; 0; i &lt; 32; i++)\n    &#123;\n        sum +&#x3D; delta;\n        x +&#x3D; ((y &lt;&lt; 4) + Key[0]) ^ (y + sum) ^ ((y &gt;&gt; 5) + Key[1]);\n        y +&#x3D; ((x &lt;&lt; 4) + Key[2]) ^ (x + sum) ^ ((x &gt;&gt; 5) + Key[3]);\n    &#125;\n    &#x2F;&#x2F;最后加密的结果重新写入到数组中\n    EntryData[0] &#x3D; x;\n    EntryData[1] &#x3D; y;\n&#125;\n \nvoid Decrypt(long* EntryData, long* Key)\n&#123;\n    &#x2F;&#x2F;分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组\n    unsigned long x &#x3D; EntryData[0];\n    unsigned long y &#x3D; EntryData[1];\n \n    unsigned long sum &#x3D; 0;\n    unsigned long delta &#x3D; 0x9E3779B9;\n    sum &#x3D; delta &lt;&lt; 5;   &#x2F;&#x2F;注意这里,sum &#x3D; 32轮之后的黄金分割值. 因为我们要反序解密.\n    &#x2F;&#x2F;总共加密32轮 那么反序也解密32轮\n    for (int i &#x3D; 0; i &lt; 32; i++)\n    &#123;\n \n        &#x2F;&#x2F; 先将y解开 然后参与运算在解x\n        y -&#x3D; ((x &lt;&lt; 4) + Key[2]) ^ (x + sum) ^ ((x &gt;&gt; 5) + Key[3]);\n        x -&#x3D; ((y &lt;&lt; 4) + Key[0]) ^ (y + sum) ^ ((y &gt;&gt; 5) + Key[1]);\n        sum -&#x3D; delta;\n    &#125;\n    &#x2F;&#x2F;最后加密的结果重新写入到数组中\n    EntryData[0] &#x3D; x;\n    EntryData[1] &#x3D; y;\n&#125;\n \nint main()\n&#123;\n \n \n \n    long Data[3] &#x3D; &#123; 0x44434241,0x48474645,0x0 &#125;;\n    printf(&quot;待加密的数值 &#x3D; %s\\r\\n&quot;, (char*)Data);\n \n    long key[4] &#x3D; &#123; 0x11223344,0x55667788,0x99AABBCC,0xDDEEFF11 &#125;;\n \n    &#x2F;&#x2F;Encrypt每次只是加密4字节数组中的两组(也就是每次加密8个字节) 如果你数据多.可以来个for循环来循环加密,但是Entrypt内部还有32次循环,所以速度上还是会有点影响.\n    Encrypt(Data, key);\n    printf(&quot;加密后的数值 &#x3D; %s\\r\\n&quot;, (char*)Data);\n    Decrypt(Data, key);\n    printf(&quot;解密后的数值 &#x3D; %s\\r\\n&quot;, (char*)Data);\n    system(&quot;pause&quot;);\n&#125;\n\n以上只是普通的tea算法的加密和解密的C语言实现,它采用分组加密,并且使用的是固定的四个128位的密钥,没有更多密钥的生成(轮密钥),只需要知道密文,密钥,delta的值,在仔细观察加密函数的改变即可.\nxtea这是teapro版\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n \n&#x2F;* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] *&#x2F;\n \nvoid encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;\n    unsigned int i;\n    uint32_t v0&#x3D;v[0], v1&#x3D;v[1], sum&#x3D;0, delta&#x3D;0x9E3779B9;\n    for (i&#x3D;0; i &lt; num_rounds; i++) &#123;\n        v0 +&#x3D; (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);\n        sum +&#x3D; delta;\n        v1 +&#x3D; (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);\n    &#125;\n    v[0]&#x3D;v0; v[1]&#x3D;v1;\n&#125;\n \nvoid decipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;\n    unsigned int i;\n    uint32_t v0&#x3D;v[0], v1&#x3D;v[1], delta&#x3D;0x9E3779B9, sum&#x3D;delta*num_rounds;\n    for (i&#x3D;0; i &lt; num_rounds; i++) &#123;\n        v1 -&#x3D; (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);\n        sum -&#x3D; delta;\n        v0 -&#x3D; (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);\n    &#125;\n    v[0]&#x3D;v0; v[1]&#x3D;v1;\n&#125;\n \nint main()\n&#123;\n    uint32_t v[2]&#x3D;&#123;1,2&#125;;\n    uint32_t const k[4]&#x3D;&#123;2,2,3,4&#125;;\n    unsigned int r&#x3D;32;&#x2F;&#x2F;num_rounds建议取值为32\n    &#x2F;&#x2F; v为要加密的数据是两个32位无符号整数\n    &#x2F;&#x2F; k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位\n    printf(&quot;加密前原始数据：%u %u\\n&quot;,v[0],v[1]);\n    encipher(r, v, k);\n    printf(&quot;加密后的数据：%u %u\\n&quot;,v[0],v[1]);\n    decipher(r, v, k);\n    printf(&quot;解密后的数据：%u %u\\n&quot;,v[0],v[1]);\n    return 0;\n&#125;\n\n相比于普通的tea算法,它增加了轮密钥的生成,即dalta值在加密过程中异或的随机性,在xtea中对delta值的魔改和对于加密函数的位置更改再或者更改以下加密函数,就比如增加一个delta值得异或,但是和tea算法相同的是,都拥有两个加密函数,4个密钥,\nxxtea这是tea得promax版\n#include &lt;stdio.h&gt;\n#include &lt;stdint.h&gt;\n#define DELTA 0x9e3779b9\n#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))\n \nvoid btea(uint32_t *v, int n, uint32_t const key[4])\n&#123;\n    uint32_t y, z, sum;\n    unsigned p, rounds, e;\n    if (n &gt; 1)            &#x2F;* Coding Part *&#x2F;\n    &#123;\n        rounds &#x3D; 6 + 52&#x2F;n;\n        sum &#x3D; 0;\n        z &#x3D; v[n-1];\n        do\n        &#123;\n            sum +&#x3D; DELTA;\n            e &#x3D; (sum &gt;&gt; 2) &amp; 3;\n            for (p&#x3D;0; p&lt;n-1; p++)\n            &#123;\n                y &#x3D; v[p+1];\n                z &#x3D; v[p] +&#x3D; MX;\n            &#125;\n            y &#x3D; v[0];\n            z &#x3D; v[n-1] +&#x3D; MX;\n        &#125;\n        while (--rounds);\n    &#125;\n    else if (n &lt; -1)      &#x2F;* Decoding Part *&#x2F;\n    &#123;\n        n &#x3D; -n;\n        rounds &#x3D; 6 + 52&#x2F;n;\n        sum &#x3D; rounds*DELTA;\n        y &#x3D; v[0];\n        do\n        &#123;\n            e &#x3D; (sum &gt;&gt; 2) &amp; 3;\n            for (p&#x3D;n-1; p&gt;0; p--)\n            &#123;\n                z &#x3D; v[p-1];\n                y &#x3D; v[p] -&#x3D; MX;\n            &#125;\n            z &#x3D; v[n-1];\n            y &#x3D; v[0] -&#x3D; MX;\n            sum -&#x3D; DELTA;\n        &#125;\n        while (--rounds);\n    &#125;\n&#125;\n \n \nint main()\n&#123;\n    uint32_t v[2]&#x3D; &#123;1,2&#125;;\n    uint32_t const k[4]&#x3D; &#123;2,2,3,4&#125;;\n    int n&#x3D; 2; &#x2F;&#x2F;n的绝对值表示v的长度，取正表示加密，取负表示解密\n    &#x2F;&#x2F; v为要加密的数据是两个32位无符号整数\n    &#x2F;&#x2F; k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位\n    printf(&quot;加密前原始数据：%u %u\\n&quot;,v[0],v[1]);\n    btea(v, n, k);\n    printf(&quot;加密后的数据：%u %u\\n&quot;,v[0],v[1]);\n    btea(v, -n, k);\n    printf(&quot;解密后的数据：%u %u\\n&quot;,v[0],v[1]);\n    return 0;\n&#125;\n\n这个版本得tea有着更高的保密性,相比于前两种的tea,它改变了主要的加密函数,进行逆向的时候要主要观察加密函数的样子,当加密函数比较乱的时候,可行观察函数的格式,xxtea的加密函数在循环内的格式都是相同,可以使用辨识度搞得字符对内容进行替换,之后再仔细观察.当然,要注意delta值变换的位置,在循环中不受影响的函数(比如轮密钥的生成),还有加密解密时函数的顺序.\n"},{"title":"C语言","url":"/2023/10/12/C%E8%AF%AD%E8%A8%80/","content":"一个X进制的整数（从an到a1），转化为十进制的公式：\na(n)a(n-1)...a(1)=a(n)*x(n-1)+...+a(2)*x+a(1)\n\n一个10进制的整数a，转化为x进制的公式为:\na除以x取余，商继续除以x取余，直到商为0，所有的余数逆序就是x的进制数。\n\n10进制转化为2进制可以用表格法及以1开始向左&#x2F;右除2所形成的表格用10进制的数字进行比较大于取1，小于取0，位数不足补上0。\n2进制和16进制的互相转换可以用以下方法:\n我们需要把2进制的数字每四个分为一组，从左向右所对应的数为8421，如果2进制的数字是1，就可以取到值，反之就是取不到。\n\n例如:\n01101011变成16进制，分为两组0110和1011，分别取值为0+4+2+0和8+0+2+1，可知16进制的数字为6b。\n\n而从16进制转换成2进制就是把16进制的每一位数字拆成由8+4+2+1所得到的形式。\n例如:\n一个8进制的数字256，它转换为10进制的数字为2x8^2+5x8^1+6=128+40+6=174。之后转换为7进制就是336。\n\n比如设计一个可以把10进制的数字转换为n进制的C语言如下。\nP7Bit:位，小b，最小单位。\nByte:字节，大B，1Byte&#x3D;8bit\n1个bit只能储存2个信息：0，1\n1个Byte能储存：2^8个信息：[-128，127]，[0，255]\n有2，4，8个Byte，没有3Byte\n数据储存位置：寄存器，内存，磁盘等。\n整数的符号表示：\n有符号和没有符号，\n有符号的用最高位表示正负，因此它们有符号之分，1表示负数，0表示正数。\n如：10110110为负，01001011为正。\n无符号的数表示0和正整数，无需表示正负，参与数值计算。\n对于一个字节的整数有符号的在[-128,127]之间，没有符号的整数在[0，255]之间。\n整数的编码分为：源码，反码和补码。\n原码：在数值前面增加了一位符号位（即最高位为符号位），该位为0表示正数，1则表示负数，其余的位置是数值大小。\n反码：正整数的反码就是其自身，而负整数的反码可以通过对其绝对值逐位求反来求得。\n补码：正数的补码为它本身，负数的补码就是它的绝对值求反加1，0的补码是0。\n表格法：512，256，128，64，32，16，8，4，2，1\n\n47用表格法转换为2进制为00101111，则-47的补码为11010001.\n\n-1的补码为11111111。\n\n128用表格法可知其2进制为10000000-128的补码为10000000。\n\n127的补码为01111111。\n\nint i&#x3D;-1在内存中存在的形式是补码，因为1的int形式为00000001，则-1为11111111。\n\nP8整数的储存方式分为：低位优先(little-endian)和高位优先(big-endian)。\n低位优先从低位到高位排序，高位优先从高到低排序。\n我们的32位系统也就是x86系统所用的方式是低位优先，64位是高位优先。对于一个整数0x00 00 00 01，靠近0x的是高位，右侧为低位。例如一个32位的整数的值为0x12345678，则在32位的系统中储存方式为78 56 34 12，如果换成64位系统就是12 34 56 78。\nhtons()\n(htons to net short)主机字节序到网络字节序转换。\nntons()\n(net to host short)网络字节序到主机字节序的转换。\n我们可以通过以下两种方式了解主机的字节序优先。\nip数据的报头是高位优先的，我们可以编写以下程序来识别。\n之后把数值改为1234.\nP9C语言中浮点数的定义：\n单精度浮点数：float,占4个字节\n双精度浮点数：double,占8个字节\n例如：\nfloat x&#x3D;1.732f；\ndouble y&#x3D;3.1415926；\n在IEEE标准中，浮点数是将特定长度的连续字节（4个字节或8个字节）的所有2进制位（32或64）分割为特定的三个区域。\n符号域：S，占1位，正0，负1.\n阶码域：E,占8位或11位，E&#x3D;e+127（float） or e+1023(double),指数e右正负即为符号数，但阶码为正是无符号数，所以把e加127或1023作为偏移，方便指数的比较。\n尾数域：M，占23位和52位因为整数部分的1是默认的可以不存储。\n公式\n精度实数的存储结构：\n例如：\n-99.75的float：1 10000101 10001111000000000000000\ndouble：1 10000000101 1000111100000000000000000000000000000000000000000000\n1.5625的二进制表示用x2取整的方法，第一次x2整数部分为1，小数部分是0.125，第二次x2的整数为0，小数为0.25，第三次的x2，整数是0，小数是0.5，第四次x2，整数是1，小数为0。所以1.5625的2进制是1.1001.\nP12P12字符类型：char（1）&#x2F;wchar_t（2或4）整型：short（2）&#x2F;int（4）&#x2F;long(4或8)&#x2F;long long(8)&#x2F;_int64(8)实数单精度：float（4）实数双精度：double（8）有符号和无符号：signed&#x2F;unsdigned,(signed)int&#x2F;unsigned int布尔类型：bool，0&#x2F;1（true&#x2F;false）C99&lt;stdbool.h&gt;typedef int bool#define true 1#define false 0\n字符编码有Ascll，utf系列，unicode。·a·是ascll的L·a·是unicode的NULL，0，’\\0’都是一样的，都是值0NULL虽然值是0，但是它的含义不一样，或者说它的类型不一样。NULL是指针类型，不过它是空指针，即值为0‘\\0’我们都知道\\是转义符，用单引号包起来，再加转义，实际上就是0，只不过它表示的是字符“0”用双引号包裹的0是字符串\n#include &lt;stdio.h&gt;#include &lt;math.h&gt;\nvoid main(){    float a &#x3D; 0;\nif (fabs(a)&lt; 1e-6)\n&#123;\n    printf(&quot;a 等于 0\\n&quot;);\n&#125;\nelse\n&#123;\n    printf(&quot;a 不等于 0\\n&quot;);\n&#125;\n\nreturn;\n\n}\n#include &lt;stdio.h&gt;#include &lt;math.h&gt;\nvoid main(){    double a &#x3D; 0;\nif (fabs(a)&lt; 1e-15)\n&#123;\n    printf(&quot;a 等于 0\\n&quot;);\n&#125;\nelse\n&#123;\n    printf(&quot;a 不等于 0\\n&quot;);\n&#125;\n\nreturn;\n\n}\nP13P13类型长度-sizeof（是一个操作符，在编译阶段就确定）char[-128,127][0,255]short[-32768,32767][0,65535]int&#x2F;long[-2147483648,2147483647][0,4294967295]float[-3.410^38,3.410^38]double[-1.710^308,1.710^308]无符号的int最小为0，最大为-1（2进制的位全是1）有符号的intint max &#x3D; 0x7fffffff除符号位全是1int min &#x3D; 0x80000000除符号位全是0在整数上溢出1是最小值，整数下溢出1是最大值。 (char)(-128*-1)&#x3D;-12816位系统中，int有符号的取值范围是[-216&#x2F;2,216&#x2F;2-1]无符号是[0,65536]所以当i&#x3D;65536是溢出1位则是-32768，i&#x3D;65535时为-32767.\nP15强制转换格式（新类型）变量丢失字节从高位开始丢失。从小到大转换要用符号位填充，整数用0填充，负数用1填充。自动（隐式）转换1，若参与的运算量的类型不同，则先转换成同一类型，然后进行运算。2，转换按数据长度的增加方向进行，以保证精度不降低。如int型和long型运算时，先把int量转成long型后在进行运算。字节数不同的转换为高字节进行运算，字节相同的如果一种有符号另一种没有符号，则转换为无符号类型。\n自动转换2\n进行算数运算（加减乘除取余及符号运算）时，不同类型数据必须转换成同一类型的数据才能运算，算数转换原则为：\n进行运算时，以表达式中最长的类型为主，将其他类型数据均转换成该类型，\na，若运算数中有double型或float型，则其他类型的数据均转换成double类型进行运算。\nb，若运算中最长的类型为long型，则其他类型数均转换成long型数。\nc，若运算中最长型为int型，则char型也转换成int型进行运算。算数转换是在运算过程中自动完成的。\nd，函数调用中参数传递时，系统隐式地将实参转换为形参的类型后，赋给形参。char和short会被转换成int，float会被转换成double。\nf，printf函数会将char和short转换成int；float会被转换成double传递。\ng，函数有返回值时，系统将隐式地将返回表达式类型转换为返回值类型，赋值给调用函数。\n注意事项：\n作业：\n1从int转换为char时字节是减少的512的2进制是0000 0001 0000 0000变为16进制是0x01 00，进行转换从大到小是舍弃高位变成0x00，之后输出的printf会把输出的char再转换成int就是0x00 00也就是0.\n首先我们能知道在int类型中0x000000ff是255转换为char从高位舍弃是0x00ff还是255但255是无符号的char类型的最大值但有符号时是-1而有符号转无符号时内部储存方式不变但是外部是无符号的%lu所表示的是long unsigned即4字节int也是4字节从char转long要填充，我们知道最小值向下溢出是最大数值就是2*32-1。\n3\n短整型变长整型要在符号位填充0，长整形变短整型要舍弃高位。\n4\n有符号变无符号时内部储存方式不变但是外部要表示无符号。\n看有符号数的最高位是否为1，如果不为1（即为0），则无符号数就直接等于有符号数；如果有符号数的最高位为1，则将有符号数取补码，得到的数就是无符号数。\n及无符号变有符号时，原值照赋，存储方式不变但是外部值可能改变。\nP16变量\n变量是内存或寄存器中用一个标识符命名的存储单元，可以用来存储一个特定类型的数据，并且数据的值在程序运行过程中可以进行修复。\n变量就至少可以给我们提供两个信息：一是变量的地址，即就是，操作系统为变量在内存中分配的若干内存首地址；二是变量的值，也就是，变量在内存中所分配的那些内存单元中所存放的数据。\n常量没有地址。\n变量的命名\n必须由字母，下划线和数字组成，但是第一个字符必须是字母，下划线也被看作是字母。\n大写字母和小写字母是不同的字符。\n局部变量建议用比较短的名，全局变量使用比较长的名字（命名变量不用拼音尽量符合英语逻辑）。\n1\n要获取变量的地址，可以用取地址符 (&amp;)来操作变量\n2\n操作系统为变量在内存中分配的若干内存首地址，变量在内存中所分配的那些内存单元中所存放的数据\n3\n3.14f中f代表这是一个单精度的数\n4\n3value，_value,value,v1\n第一个不和法。\nP17\n静态存储区：内存在程序编译的时候就已经分配好，这块内存在程序的整个运行期间都存在。 它主要存放静态数据、全局数据和常量。\n栈区：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。 栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。\n 堆区：亦称动态内存分配\n11.0属于没有被定义的状态，此时只能打印出0 or 1.\nP18以 int buf[100]&#x3D;{0} 为例，集中讨论 buf、buf[0]、&amp;buf[0]、&amp;buf 四个字符含义的内涵。\n1、buf：有两层含义，一是数组名，sizeof(buf) 时就是数组名的含义；二是等价于 &amp;buf[0]，表示数组的第一个元素的首字节地址，是一个常量值。因此，既然是一个常量值，无论从哪层含义来使用，buf 都不能作为左值来使用，但是，buf 可以用来作为右值来使用，作为右值使用时，应理解为地址。\n2、buf[0]：表示存储第一个元素的空间，可对其进行读写操作，所以可以作为左值来使用。\n3、&amp;buf[0]：等价于 buf，是一个地址常量，只能作为右值使用。\n4、&amp;buf：表示地址的首地址，是一个地址常量，只能作为右值使用。\nbuf 与 &amp;buf 的值相等，但是含义完全不同。printf(“%p\\n”,buf) 与 printf(“%p\\n”,&amp;buf) 这两条代码的打印结果是相同的，表明它们的值是相同的，但是 printf(“%p\\n”,buf+1) 与 printf(“%p\\n”,&amp;buf+1) 的结果完全不同，因为它们的含义不同，buf 表示数组的第一个元素的首字节地址，加 1 加的时一个元素空间的大小；&amp;buf 表示的是整个数组的首地址，加 1 加的是整个数组空间大小，数组首地址主要用于构建多维数组，对于一堆数组来说，数组首地址没有太大的实用意义。\nfflush(sidin)使用回车键删掉上一个输入的数值。\nchar c1&#x3D;getch();直接输出值{不会在屏幕上直接显示}\nchar c2&#x3D;getchar();需要回车键输出值\n使用上述两个需要有#include &lt;conio.h&gt;\ngetch()可以间隔分段使用。\nscanf_s可以用来限制输入的字符防止数值溢出。（只有微软有）\ngets,puts平替scanf。\n输入一个字符串时不用&amp;，而变量需要在前面加&amp;\n使用_wchart定义，在scanf中使用%lc或%C输入\nscanf后加入_s可以限制字符的输入防止溢出。\nget同理\n4996警告是一种数据溢出警告当输入的数值过大时溢出的数值可能会损坏其他数据造成破坏。\nP19i++和++i的区别：\n一，C语言内建型别：\ni++;\n++i;\nC++里，i是一个对象，++i比i++效率高。\n二，在复合表达式或赋值语句中：\nint i&#x3D;0；\nint a&#x3D; i++;a&#x3D;i;i&#x3D;i+1\nint i&#x3D;0;\nint b&#x3D; ++i;i&#x3D;i+1;b&#x3D;i-&gt;b&#x3D;1,i&#x3D;1\n三，函数中\ni++\n++i\nI++,++i属于不确定（由编译器决定） \n\n对于i&#x3D;&#x3D;0和0&#x3D;&#x3D;i来说，在if（）{}时是没错的但是，如果输入少&#x3D;时i&#x3D;&#x3D;0不会报错，产生的错误不易被发现，但是0&#x3D;&#x3D;i就会报错使错误更容易被发现改正。\na%&#x3D;5是指a&#x3D;a%5取余，a*&#x3D;5是指a×5.\nP20\n循环switch语句是一种多路段判定语句，它测试表达语句是否为一些常量整数值中的某一个值匹配，并执行相应的分支动作。所以switch语句也是一种分支语句，可以和if语句互相转换。\nswitch(a)&#x2F;&#x2F;a只能为整数(char,short,int,long等),不能为指针，浮点数。\n控制语句之循环语句：for,while,do-while.\n\nfor(表达式1;条件表达式2;表达式3)\n{\n循环体\n}\nfor循环中的“参数初始化表达式”，“条件表达式”和“更新循环变量表达式”都是选择项，即可以缺省，但是“;”不能缺。省略了初始化，表示不对循环控制变量赋初值，省略了条件表达式，则不做其他处理时便成为死循环。省略了增量，则不对循环控制变量进行操作，这时可在语句中加入修改循环控制变量的语句。\n1，简单的for循环\nfor(int i&#x3D;0; i&lt;10;i++)\n{\nprintf(“i:%d\\n”,i);\n}\nreturn 0; \n2，while的循环\nint i&#x3D;0;\nwhile(i&lt;10)\n{\nprintf(“i:%d\\n”,i);\ni++;\n}\nreturn 0;\n3，do_while语句的用法\nint i&#x3D;0;\ndo\n{\nprintf(“i:%d\\n”,i);&#x2F;&#x2F;先执行在打印。\ni++;\n} while  (i&lt;10);&#x2F;&#x2F;while的循环写在花括号后边。\nreturn 0;\n控制语句之转向语句\n\ngoto\n循环中的转向语句\nbreak\ncontinue\nreturn:\nreturn 0 or return.\n慎用goto语句，使用方式：\n语句1\n语句2\ngoto Lable1;\n. . . . \nLable1:\n语句7；\n语句8；\n语句9；\n\n数组数组一维数组的定义：数据类型 数组名[常量表达式]数组元素的类型 合法标识符 数组元素个数。数组是连续的可以随机访问。但是链表就不能。\n字符数组char str1[]&#x3D;{‘h’,’e’,’l’,’l’,’o’,’w’,’o’,’r’,’l’,’d’};char str2[]&#x3D;”hello world”;第一个是字符数组，第二个即是字符数组还是字符串。&#x2F;&#x2F;sizeof是用来计算类型和数据的长度，strlen是用来计算字符串中非‘\\0’的字符个数。每当重新定义变量的时候所对应的a[i]就会改变。数组的赋值要在初始化阶段完成，初始化结束后不能直接赋值必须拷贝或单个元素赋值。数组名是常量指针一旦定义就不能修改。 #define hansu(a) sizeof(a)&#x2F;sizeof(a[0]) 如果输入的数组过多就会导致产生一些垃圾数值，C语言不会检测数组溢出。\n二维数组初始化数组a[5]&#x3D;{1,2,3,4,5};二维数组和一维数组的储存方式相同数组是一种引用数据类型，数组引用变量只是一个引用，数组元素和数组变量在内存里是分开存放的。 下面将深入介绍数组在内存中的运行机制。 数组引用变量只是一个引用，这个引用变量可以指向任何有效的内存，只有当该引用指向有效内存后，才可通过该数组变量来访问数组元素。 与所有引用变量相同的是，引用变量是访问真实对象的根本方式。 也就是说，如果我们希望在程序中访问数组，则只能通过这个数组的引用变量来访问它。 实际的数组元素被存储在堆（heap）内存中；数组引用变量是一个引用类型的变量，被存储在栈（stack）内存中。采用按行列出的效率高因为这样的数组是连续的可以随机访问而按列排序在储存中是跳跃的。\n\\#include &lt;stdio.h&gt;\nvoid func(int a\\[],int len)\n&#123;\n    printf(&quot;sizeof(a) in func&#x3D;%d\\n&quot;,sizeof(a));\n&#125;\nint main()\n&#123;\nint a\\[10]&#x3D;&#123;0&#125;;\nprintf(&quot;sizeof(a)&#x3D;%d\\n&quot;,sizeof(a));\nfunc(a,10);\nreturn  0;\n&#125;\n输出40，4\n\n\\#include &lt;stdio.h&gt;\nint main()\n&#123;\n    int a\\[5]&#x3D;&#123;1,2,3,4,5&#125;;\n    int *ptr1&#x3D;(int*)(&amp;a+1);\n    int *ptr2&#x3D;(int*)((int)a+1);\n    printf(&quot;%x,%x&quot;,ptr1\\[-1],*ptr2);\n    return 0;\n&#125;\n输出5，200000\n\n字符串数组是由零个或多个字符组成的有限序列。C语言的字符串可以定义为：”c1c2c3c4……cn\\0”。从定义的形式可以看出，C语言的字符串是以’\\0’结尾的。程序在存放字符后会自动加上’\\0’。当字符串中的字符有符号时可以用&quot;real&quot;来防止产生的语法错误。（即在普通字符前加上反斜线。）\n多字节字符串和宽字节字符串在C语言中，多字节字符串每个字符的编码宽度都不等，可以是一个字节还可以是多个字节。例如：char *str &#x3D; “Hello World!你好，世界!”。就是一个多字节的字符串(英文一个字节，中文两个字节)宽字节符的每个字节都是一样的。比如：wchar_t *wstr&#x3D;L”Hello World!你好，世界！”。上面的字符串都是两个字节。我们可以利用wctomb()进行宽字节和多字节的转。\n \\#include &lt;stdio.h&gt;\n int g_sl\\[]&#x3D;&quot;hello world 1&quot;;\nint main()\n&#123;\n\tchar \\*s2&#x3D;&quot;hello world 2&quot;;*不能在指针上修改数据，即不能修改存在静态常量值的字符串*\n\tchar s3\\[]&#x3D;&quot;hello world 3&quot;;\n\tchar \\*ps4&#x3D;(char\\*)malloc(128);\n\t\nif(ps4\\&#x3D;&#x3D;NULL)\n&#123;\n\treturn -1;\n&#125;\nmemset(ps4,1,128);\nstrcpy(ps4,128,&quot;hello world 4&quot;);\n\nprintf(&quot;%s\\\\n&quot;,g_sl);*静态区*\nprintf(&quot;%s\\\\n&quot;,s2);*静态常量区*\nprintf(&quot;%s\\\\n&quot;,s3);*栈*\nprintf(&quot;%s\\\\n&quot;,ps4);*堆*\n\nfree(ps4);\n\nreturn 0;\n&#125;\n\n\n字符串遍历的三种方法：char *str &#x3D; “hello world!”;while(*str !&#x3D; ‘\\0’){    printf(“%c”,*str);    str++;}\nfor(;*str !&#x3D; ‘\\0’;str++){    printf(“%c”,str);}\nfor(int i&#x3D;0;str[i] !&#x3D; ‘\\0’;i++){    printf(“%c”,str[i]);}\n字符串库函数的应用：#include&lt;string.h&gt;#include&lt;stdio.h&gt;#include&lt;tchar.h&gt;&#x2F;&#x2F;定义三种类型的字符串，缓存\nprintf &#x2F; printf(“%ws”) &#x2F; _tprintf(_T(“%s”),xx)strlen(取得多字节字符串中字符长度，不包含 ‘&#x2F;0’。) &#x2F; wsclen(取得宽字节字符串中字符长度，不包含 ‘&#x2F;0’。) &#x2F; _tcslen(取得宽字节&#x2F;多字节字符串中字符长度，不包含 ‘&#x2F;0’。)\nstrcpy &#x2F; stecpy_s &#x2F; _tcslen1,例如:char *strcpy(char* dest, const char *src);功能:把从src地址开始且含有NULL结束符的字符串复制到以dest开始的地址空间,说明：src和dest所指内存区域不可以重叠且dest必须有足够的空间来容纳src的字符串。返回指向dest的指针。\nwcscpy &#x2F; wcscpy_s &#x2F; wcsncpy_tcscpy &#x2F; _tcscpy_s &#x2F; _tcsncpystrcmp &#x2F; strncmp &#x2F; stricmp &#x2F; strnicmp比较字符串s1和s2\nstrcat &#x2F; strcat_s   &#x2F;&#x2F;hello+world，文件路径字符串追加&#x2F;连接函数，它的功能就是在一个字符串后面追加上另外一个字符串。\nstrchr &#x2F; strrchr &#x2F;&#x2F;返回位置地址，str，求文件名，扩展名。查找字符串中的一个字符，并返回该字符在字符串中第一次出现的位置.\nstrstr函数搜索一个字符串在另一个字符串中的第一次出现找到所搜索的字符串，则该函数返回第一次匹配的字符串的地址如果未找到所搜索的字符串，则返回NULL\nstrtok &#x2F; strtok_s  &#x2F;&#x2F;ip地址    strtok(st_ip,st_ip_delim);\n    strtok_s(NULL,st_s1_deilm,&amp;next);\n\n用于分解字符串，返回分解得到的字符串指针.atof &#x2F; atoi &#x2F; atol &#x2F; atoll &#x2F; _ttol()\n指针指针是个变量里面存放内存地址。指针的初始化，可以让指针指向某一个变量的地址，也可以让指针指向一个分配的内存或者字符串常量，当然也可以指向NULL。例如：一，int i，*p  \\\\声明了一个整形变量i，一个指针p，这里的*与int一起。p&#x3D;&i;二，int i;int *p&#x3D;NULL;&#x2F;&#x2F;声明了一个指针p，并初始化为NULL。p&#x3D;&i;&#x2F;&#x2F;将指针p指向变量i.三，int i;int *p&#x3D;&i;&#x2F;&#x2F;声明了一个指针p，并直接初始化为变量i的地址。四，char *p (char*)malloc(100);&#x2F;&#x2F;声明一个字符指针p，并初始化为堆上的一个地址。char *str&#x3D;”hello world”;&#x2F;&#x2F;声明了一个字符指针str，并初始化为字符串的首地址。char c&#x3D;’A’;char *str&#x3D;&c;&#x2F;&#x2F;声明了一个指针并直接初始化围为变量C的地址。char *pch &#x3D;&c;\n地址：有效地址，NULL地址，野地址，信封地址。#define NULL ((void*)0)\n*p 解引用运算符（dereferrnce）*解引用：通过指针（存放的内存地址），找到对应的内存和里面存放的数据，（类似于邮递员根据信封地址，找到地点）。\n&amp;和*互为逆运算：*&amp;与&amp;*&amp;:取址，取变量的地址（reference）*:取内存，是取地址对应的内存（dereference），*p代表该内存，内存的长度就是p类型的长度，如果为void类型，那么长度不确定，GCC中默认为1字节。\n*在指针定义的时候，是和类型结合的.*在指针使用的时候，是取内存（解引用）char *s&#x3D;”hello world”;&#x2F;&#x2F;此处的*s是用于定义指针s.char c&#x3D;’a’;char *p&#x3D;&c;&#x2F;&#x2F;此处的*p是用于定义指针p,实际上是（char*）p&#x3D;&c;int x&#x3D;10,*p;&#x2F;&#x2F;此处的*p一样是用于定义指针p，此处的*与int结合：int *.*p+&#x3D;1;&#x2F;&#x2F;此处的*p是解引用(即C).printf(“%c\\n”,*p);&#x2F;&#x2F;此处的*p是解引用.void func(char *p){    printf(“%c\\n”,*p);&#x2F;&#x2F;取值}\n指针类型和相互转换char *p;&#x2F;&#x2F;指向内存单元的1个字节.short *p;&#x2F;&#x2F;指向内存单元的2个字节.int *p;&#x2F;&#x2F;指向内存单元的4个字节.float *p;&#x2F;&#x2F;指向内存单元的4个字节.double *p;&#x2F;&#x2F;指向内存单元的8个字节.\nsizeof(p)&#x3D;4 or 8 &#x2F; x86 or x64sizeof(*p)&#x3D;所知类型的长度\nchar c;int *p &#x3D; (int *)&c;\nint a;int *p1 &#x3D; &a;char *p2 &#x3D; (char*)p1;\nvoid *pvoid *p;&#x2F;&#x2F;这个类型来说,其他类型指针隐式转换成该类型,不能*p来取值,先转换特定类型再取值.可以接受任何类型的指针赋值给其他类型的指针,需要强转.不能进行解引用*运算,必须先转换.int i&#x3D;10;char ch&#x3D;’a’;int *p&#x3D;&i;char *p2&#x3D;&ch;\nvoid *pv1&#x3D;p1;&#x2F;&#x2F;不能*pv1 errorvoid *pv2&#x3D;p2;&#x2F;&#x2F;不能*pv2 error\nint *p3&#x3D;(int*)pv1;&#x2F;&#x2F;*p3char *p4&#x3D;(char*)pv2;&#x2F;&#x2F;*p4void *memcpy(void *dst,void *src,size_t len)sizeof(pv1)=&#x3D;4 or 8sizeof(*pv1)=&#x3D;error,gcc=&#x3D;1.\n字符指针既可以指向字符,也可以指向字符(其实也是指向的字符,即字符串的地址).判断指向字符还是字符串,在代码中可以自己确定.将字符或者字符串传给函数做参数,也可以通过字符指针完成.(二者需要自己确定)char ch&#x3D;’a’;char *p&#x3D;ch;\nchar p&#x3D;”hello world”;while(*p&#x3D;’\\0’){    printf(“%c”,*p);    p++;}\nsizeof(p),sizeof(*p)第一个指的是指针的长度第二个指的是指针对应类型的长度\n用指针的方法判断低位优先还是高位优先\n\\#include &lt;stdio.h&gt;\nint main(void)\n&#123;\n\tint num &#x3D; 0x000000ff;\n\tchar\\* p1 &#x3D; (char\\*)&amp;num;\n\tunsigned char\\* p2 &#x3D; (unsigned char\\*)&amp;num;\n\tprintf(&quot;%lu\\\\n&quot;,\\*p1);\n\tprintf(&quot;%lu\\\\n&quot;,\\*p2);\n\treturn 0;\n&#125;\n输出是4294967295,255\n\n二级指针二级指针:存放一级指针的地址一级指针存放的是普通变量的内存地址.二级指针存放的是一级指针的地址.int a&#x3D;10;int *p&#x3D;&a;int **pp&#x3D;&p;*p为a   &amp;a为p*pp为p   &amp;p为pp**pp为a**pp–&gt;*(*pp)–&gt;*(p)–&gt;*p–&gt;a\n\\#include &lt;stdio.h&gt;\n\nint main()\n&#123;\nint a &#x3D; 10;\n\nint\\* p &#x3D; &amp;a;\nint\\*\\* pp &#x3D; &amp;p;\n\n&#x2F;&#x2F;a,&amp;a,p,&amp;p,pp,\\*pp,\\*\\*pp\n\nprintf(&quot;a:%d\\\\n&quot;,a);&#x2F;&#x2F;10\nprintf(&quot;&amp;a:%p\\\\n&quot;,&amp;a);&#x2F;&#x2F;addr of a\nprintf(&quot;p%p\\\\n&quot;,p);&#x2F;&#x2F;addr of a\nprintf(&quot;&amp;p:%p\\\\n&quot;,&amp;p);&#x2F;&#x2F;adde of p\nprintf(&quot;pp:%p\\\\n&quot;,pp);&#x2F;&#x2F;addr of p\nprintf(&quot;\\*p:%p\\\\n&quot;,\\*p);&#x2F;&#x2F;10\nprintf(&quot;\\*pp:%p\\\\n&quot;, \\*pp);&#x2F;&#x2F;p.addr of a\nprintf(&quot;\\*\\*pp:%p\\\\n&quot;,\\*\\*pp);&#x2F;&#x2F;a,10\n\nreturn 0;\n&#125;\n\n二级指针的应用如果指针做实参,那么传实参的指针(地址),就必须使用二级指针.要改变指针的值,就必须传指针的指针(地址)(二级指针)\n二级指针的作用:传参时改变一级指针的值.\n传参int func(int x);传实参值,不能改变实参int func(int *x);传实参指针,修改实参int func(int &amp;x);传实参引用,修改实参int func(int **x);实参是指针,传指针的指针,修改指针int func(int *&amp;x);实参是指针,传指针的引用,修改指针\n\\#include &lt;stdio.h&gt;\nvoid f(int\\*\\* ptr1, int\\* ptr2)\n&#123;\n\tint\\* tmp &#x3D; ptr2;\n\t\\*\\*ptr1 \\*&#x3D; 10;\n\t\\*ptr2 \\*&#x3D; 10;\n\tptr2 &#x3D; \\*ptr1;\n\t\\*ptr1 &#x3D; tmp;\n&#125;\n\nint main(void)\n&#123;\n\tint i &#x3D; 0, j &#x3D; 20, \\* p1 &#x3D; &amp;i, \\* p2 &#x3D; &amp;j;\n\tf(&amp;p1, p2);\n\tprintf(&quot;i:%d,j:%d,p1:%p,p2:%p\\\\n&quot;, i, j, \\*p1, \\*p2);\n\treturn 0;\n&#125;\n输出为0,200.\n\n\\#include &lt;stdio.h&gt;\nvoid GetMemory(char\\* p)\n&#123;\n\tp &#x3D; (char\\*)malloc(100);\n&#125;\nvoid Test(char \\*s)\n&#123;\n\tchar\\* str &#x3D; NULL;\n\tGetMemory(str);&#x2F;&#x2F;这里应该传二级指针\n\tstrcpy(str,s);\n\tprintf(str);\n&#125;\n\n正确做法\n\\#include &lt;stdio.h&gt;\n\\#include &lt;string.h&gt;\nvoid get_memory2(char \\*\\*p)\n&#123;\n\t\\*p &#x3D; (char \\*)malloc(100);\n&#125;\nint main()\n&#123;\n\tchar\\* str &#x3D; NULL;\n\tget_memory2(&amp;str);&#x2F;&#x2F;这里应该传二级指针\n\tstrcpy_s(str,100,&quot;hello world&quot;);\n\tprintf(&quot;%s\\\\n&quot;,str);\n\tfree(str);\n\tstr &#x3D; NULL;\n\treturn 0;\n&#125;\n\n结构体结构体定义:struct(结构体)每一个构成成员可以是一个基本数据类型或者又是一个构造类型.四种定义结构体的方法一,struct 结构名{    成员列表}struct 结构名 变量名;二,struct 结构名{    成员列表}变量名1,变量名2;三,struct{    成员列表}变量名1,变量名2;四,typedef struct_结构名{    成员列表}结构名,*p结构名;结构名 变量名;\n结构体的定义,初始化与成员的访问\\#include &lt;stdio.h>\n\\#include &lt;string.h>\n\ntypedef struct \\_student\n&#123;\n\tint id;\n\tint age;\n\tchar name\\[20\\];\n\tchar sex;\n\tfloat score;\n&#125;student,\\*pstudent;\n\nint main()\n&#123;\n\tstudent s1 = &#123;17,22,\"Tom\",'M',99.5f&#125;;\n\tstudent s2 = &#123;0&#125;;\n\ns2.id = 19;\ns2.age = 23;\nstrcpy_s(s2.name,20, \"lily\");\ns2.sex = 'F';\ns2.score = 87.5f;\n\nprintf(\"id:%d,age:%d,name:%s,sex=%c,%f\\\\n\",\n\ts1.id,s1.age,s1.name,s1.sex,s1.score);\nprintf(\"id:%d,age:%d,name:%s,sex=%c,%f\\\\n\",\n\ts2.id, s2.age, s2.name,s2.sex,s2.score);\n\nreturn 0;\n&#125;\n\n结构体指针访问\\#include &lt;stdio.h&gt;\n\\#include &lt;string.h&gt;\n\\#include &lt;stdlib.h&gt;\n\ntypedef struct \\_student\n&#123;\n\tint id;\n\tint age;\n\tchar name\\[20\\];\n\tchar sex;\n\tfloat score;\n&#125;student, \\* pstudent;\n\nint main()\n&#123;\n\tstudent s1 &#x3D; &#123; 17,22,&quot;Tom&quot;,&#39;M&#39;,99.5f &#125;;\n\tstudent s2 &#x3D; &#123; 0 &#125;;\n\ns2.id &#x3D; 19;\ns2.age &#x3D; 23;\nstrcpy_s(s2.name, 20, &quot;lily&quot;);\ns2.sex &#x3D; &#39;F&#39;;\ns2.score &#x3D; 87.5f;\n\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f\\\\n&quot;,\n\ts1.id, s1.age, s1.name, s1.sex, s1.score);\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f\\\\n&quot;,\n\ts2.id, s2.age, s2.name, s2.sex, s2.score);\n\nstudent* ps1 &#x3D; &amp;s1;\npstudent ps2 &#x3D; &amp;s2;&#x2F;&#x2F;pstudent &#x3D;&#x3D; student \\*\n\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f\\\\n&quot;,\n\tps1-&gt;id,ps1-&gt;age,ps1-&gt;name,ps1-&gt;sex,ps1-&gt;score);\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f\\\\n&quot;,\n\tps2-&gt;id, ps2-&gt;age, ps2-&gt;name, ps2-&gt;sex, ps2-&gt;score);\n\n&#x2F;&#x2F;ps1+1\n&#x2F;&#x2F;sizeof(ps1),sizeof(\\*ps1)\\&#x3D;\\&#x3D;sizeof(student)\n\nprintf(&quot;sizeof(ps1)&#x3D;%d,sizeof(*ps1)&#x3D;%d,sizepf(student)&#x3D;%d\\\\n&quot;,\n\tsizeof(ps1),sizeof(*ps1),sizeof(student));\n\nprintf(&quot;sizeof(student*):%d\\\\n&quot;,sizeof(student\\*));\n\nprintf(&quot;ps1:%p,ps1+1:%p\\\\n&quot;,ps1,ps1+1);\n\nstudent* ps3 &#x3D; (student*)malloc(sizeof(student));\nif (ps3 &#x3D;&#x3D; NULL)\n&#123;\nreturn -1;\n&#125;\nmemset(ps3, 0, sizeof(student));\nps3-&gt;id &#x3D; 25;\nps3-&gt;age &#x3D; 24;\nstrcpy_s(ps3-&gt;name, 20, &quot;lilei&quot;);\nps3-&gt;sex &#x3D; &#39;M&#39;;\nps3-&gt;score &#x3D; 86.5f;\n\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f\\\\n&quot;,\n\tps3-&gt;id, ps3-&gt;age, ps3-&gt;name, ps3-&gt;sex, ps3-&gt;score);\nfree(ps3);\nps3 &#x3D; NULL;\n\nreturn 0;\n&#125;\n\n*与-&gt;,.运算符首先-&gt;与.运算符比*优先级高\ntypedef struct \\_student\n&#123;\n\tint id;\n\tint age;\n\tchar name\\[20\\];\n\tchar sex;\n\tfloat score;\n&#125;student, \\* pstudent;\nstudent stdt&#x3D;&#123;...&#125;;\npstdt&#x3D;&amp;stdt;\n\\*pstdt-&gt;sex--&gt;\\*(pstdt-&gt;sex)&#x2F;&#x2F;错误,因为sex不是一个指针.\n\\*pstdt-&gt;name--&gt;\\*(pstdt-&gt;name)&#x2F;&#x2F;正确的,因为name是一个指针,name是一个字符.\n\\*pstdt.sex--&gt;\\*(pstdt.sex)&#x2F;&#x2F;错误,pstdt是指针,不支持.运算符,没有.这个运算符.\n(\\*pstdt).sex--&gt;stdt.sex\\&#x2F;&#x2F;正确,\\*pstdt就是stdt.\n\n结构体中的结构体\\#include &lt;stdio.h&gt;\n\\#include &lt;string.h&gt;\n\\#include &lt;stdlib.h&gt;\n\ntypedef struct _date\n&#123;\n\tint year;\n\tint month;\n\tint day;\n\n&#125;date;\n\ntypedef struct _student\n&#123;\n\tint id;\n\tint age;\n\tchar name[20];\n\tchar sex;\n\tfloat score;\n\tdate birthday;\n&#125;student, * pstudent;\n\nint main()\n&#123;\n\tstudent s1 &#x3D; &#123; 17,22,&quot;Tom&quot;,&#39;M&#39;,99.5f,&#123;1995,2,5&#125;&#125;;\n\tstudent s2 &#x3D; &#123; 0 &#125;;\n\ns2.id &#x3D; 19;\ns2.age &#x3D; 23;\nstrcpy_s(s2.name, 20, &quot;lily&quot;);\ns2.sex &#x3D; &#39;F&#39;;\ns2.score &#x3D; 87.5f;\ns2.birthday.year &#x3D; 1997;\ns2.birthday.month &#x3D; 6;\ns2.birthday.day &#x3D; 21;\n\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f,&quot;\n\t&quot;year:%d,month:%d,day:%d\\n&quot;,\n\ts1.id, s1.age, s1.name, s1.sex, s1.score,\n\ts1.birthday.year,s1.birthday.month,s1.birthday.day);\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f,&quot;\n\t&quot;year:%d,month:%d,day:%d\\n&quot;,\n\ts2.id, s2.age, s2.name, s2.sex, s2.score,\n\ts2.birthday.year,s2.birthday.month,s2.birthday.day);\n\nstudent* ps1 &#x3D; &amp;s1;\npstudent ps2 &#x3D; &amp;s2;&#x2F;&#x2F;pstudent &#x3D;&#x3D; student *\n\t\n\nprintf(&quot;*ps2-&gt;name:%c\\n&quot;, *ps2-&gt;name);\n\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f\\n&quot;,\n\tps1-&gt;id,ps1-&gt;age,ps1-&gt;name,ps1-&gt;sex,ps1-&gt;score);\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f\\n&quot;,\n\tps2-&gt;id, ps2-&gt;age, ps2-&gt;name, ps2-&gt;sex, ps2-&gt;score);\n\n&#x2F;&#x2F;ps1+1\n&#x2F;&#x2F;sizeof(ps1),sizeof(*ps1)&#x3D;&#x3D;sizeof(student)\n\nprintf(&quot;sizeof(ps1)&#x3D;%d,sizeof(*ps1)&#x3D;%d,sizepf(student)&#x3D;%d\\n&quot;,\n\tsizeof(ps1),sizeof(*ps1),sizeof(student));\n\nprintf(&quot;sizeof(student*):%d\\n&quot;,sizeof(student*));\n\nprintf(&quot;ps1:%p,ps1+1:%p\\n&quot;,ps1,ps1+1);\n\nstudent* ps3 &#x3D; (student*)malloc(sizeof(student));\nif (ps3 &#x3D;&#x3D; NULL)\n&#123;\n\treturn -1;\n&#125;\nmemset(ps3, 0, sizeof(student));\nps3-&gt;id &#x3D; 25;\nps3-&gt;age &#x3D; 24;\nstrcpy_s(ps3-&gt;name, 20, &quot;lilei&quot;);\nps3-&gt;sex &#x3D; &#39;M&#39;;\nps3-&gt;score &#x3D; 86.5f;\nps3-&gt;birthday.year &#x3D; 1996;\nps3-&gt;birthday.month &#x3D; 6;\nps3-&gt;birthday.day &#x3D; 7;\n\nprintf(&quot;id:%d,age:%d,name:%s,sex&#x3D;%c,%f,&quot;\n\t&quot;year:%d,month:%d,day:%d\\n&quot;,\n\tps3-&gt;id, ps3-&gt;age, ps3-&gt;name, ps3-&gt;sex, ps3-&gt;score,\n\tps3-&gt;birthday.year,ps3-&gt;birthday.month,\n\tps3-&gt;birthday.day);\nfree(ps3);\nps3 &#x3D; NULL;\n\nreturn 0;\n&#125;\n\n结构体中的指针-1\\#include &lt;stdio.h&gt;\n\\#include &lt;string.h&gt;\n\\#include &lt;stdlib.h&gt;\n\ntypedef struct _student\n&#123;\n\tint id;\n\tint age;\n\tchar *name;\n\tchar sex;\n\tfloat score;\n&#125;student,*pstudent;\n\nint main()\n&#123;\n&#x2F;&#x2F;student s1 &#x3D; &#123; 11,21,&quot;Tom&quot;,&#39;M&#39;,97.5f&#125;;\nstudent s2 &#x3D; &#123; 0 &#125;;\n\ns2.id &#x3D; 15;\ns2.age &#x3D; 22;\n\ns2.name &#x3D; (char*)malloc(20);\nif (s2.name &#x3D;&#x3D; NULL)\n&#123;\n\treturn -1;\n&#125;\nstrcpy_s(s2.name,20,&quot;lily&quot;);\ns2.sex &#x3D; &#39;M&#39;;\ns2.score &#x3D; 94.5f;\n\t\n\t\n\t\nstudent* s3 &#x3D; (student*)malloc(sizeof(student));\nif (s3 &#x3D;&#x3D; NULL)\n&#123;\n\treturn -1;\n&#125;\nmemset(s3, 0, sizeof(student));\ns3-&gt;id &#x3D; 18;\ns3-&gt;age &#x3D; 23;\ns3-&gt;name &#x3D; (char*)malloc(20);\nif (s3-&gt;name &#x3D;&#x3D; NULL)\n&#123;\n\tfree(s3);\n\treturn -1;\n&#125;\nmemset(s3-&gt;name, 0, 20);\nstrcpy_s(s3-&gt;name, 20, &quot;david&quot;);\ns3-&gt;sex &#x3D; &#39;M&#39;;\ns3-&gt;score &#x3D; 92.5f;\n\n&#x2F;&#x2F;printf(&quot;s1:name:%s\\n&quot;,s1.name);\nprintf(&quot;s2:name:%s\\n&quot;, s2.name);\nprintf(&quot;s3.name:%s\\n&quot;, s3-&gt;name);\n\nfree(s2.name);\ns2.name &#x3D; NULL;\nfree(s3-&gt;name);\ns3-&gt;name &#x3D; NULL;\nreturn 0;\n&#125;\n\n\n结构体中的指针-2:链表和树typedef struct _node{int value;struct _node *next;}node,*pnode;\ntypedef struct _btree{int data;struct _btree *left;struct _btree *right;}btree,*pbtree;\n结构体中的指针和数组结构体赋值时的拷贝typedef struct _struct1{    …    …}struct1;struct1 s1&#x3D;{1,’a’};struct1 s2&#x3D;s1;&#x2F;&#x2F;?struct1 s3;s3&#x3D;s1;&#x2F;&#x2F;?\n浅拷贝和深拷贝拷贝中默认是浅拷贝\n结构体数组结构体数组的初始化和应用结构体指针数组\n\n    \n        点击我查看内容\n    \n    \n        #include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;\ntypedef struct _student{    int score;    char name[16];}student,*pstudent;\nint main(){    student stu1[3] &#x3D; { {78,”tom”}, {83,”lily”}, {79,”david”} };    student stu2[3] &#x3D; { 0 };    pstudent stu3[3] &#x3D; { 0 };\nfor (int i = 0; i &lt; 3; i++)\n{\n    printf(&quot;Please input score and name for %d\\n&quot;, i + 1);\n    scanf_s(&quot;%d,%s&quot;, &amp;stu2[i].score, stu2[i].name, 16);\n}\n\nfor (int i = 0; i &lt; 3; i++)\n{\n    stu3[i] = &amp;stu1[i];\n}\n\nfor (int i = 0; i &lt; 3; i++)\n{\n    printf(&quot;stu1:%d:score:%d,name:%s\\n&quot;, i, stu1[i].score,\n        stu1[i].name);\n}\n\n\n    \n\n\n\n结构体做参数传指针传值判断两个同学的成绩\n","tags":["C语言code"]},{"title":"linux","url":"/2023/10/12/linux/","content":"开使ls -s 命令用于显示目录中文件的大小，以块为单位。每个块的大小通常为 512 字节。如果您想查看文件的详细信息，可以使用 ls -l 命令。该命令将显示文件的权限、所有者、大小、创建时间等详细信息。\n\ntouch 命令用于修改文件或目录的时间属性，包括存取时间和更改时间。如果文件不存在，系统会建立一个新的文件。以下是使用 touch 命令创建文件的步骤：\n打开终端：在Linux中，可以通过按下 Ctrl + Alt + T 快捷键打开终端。\n输入以下命令：touch filename，其中 filename 是您要创建的文件名。\n按下 Enter 键即可创建文件。\n\n在Linux中，管道符 | 用于将一个命令的输出作为另一个命令的输入。例如，要查找包含特定文本的文件，可以使用以下命令：grep “text” filename | less。此命令将 grep 命令的输出作为 less 命令的输入，以便您可以轻松地查看匹配的行。mv 命令可以用于移动文件或重命名文件。要重命名文件，请使用以下命令：\nmv old_filename new_filename\n其中 old_filename 是要重命名的文件名，new_filename 是新的文件名。请注意，如果 new_filename 已经存在，则会覆盖该文件。\n\n\n在Linux中，软链接（也称为符号链接）是指一个文件或目录，它指向另一个文件或目录。软链接类似于Windows中的快捷方式。以下是创建软链接的步骤：\n打开终端：在Linux中，可以通过按下 Ctrl + Alt + T 快捷键打开终端。\n输入以下命令：ln -s &#x2F;path&#x2F;to&#x2F;original &#x2F;path&#x2F;to&#x2F;link，其中 &#x2F;path&#x2F;to&#x2F;original 是要链接的文件或目录的路径，&#x2F;path&#x2F;to&#x2F;link 是新的软链接的路径。\n按下 Enter 键即可创建软链接。\n\n要将文件复制到指定位置，您可以使用 cp 命令。以下是使用 cp 命令复制文件的步骤：\n打开终端：在Linux中，可以通过按下 Ctrl + Alt + T 快捷键打开终端。\n输入以下命令：cp &#x2F;path&#x2F;to&#x2F;source &#x2F;path&#x2F;to&#x2F;destination，其中 &#x2F;path&#x2F;to&#x2F;source 是要复制的文件的路径，&#x2F;path&#x2F;to&#x2F;destination 是目标位置的路径。\n按下 Enter 键即可复制文件。\n以下是一些常见的选项：\n\n-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于 dpR 参数组合。\n-d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。\n-r 或 --recursive：用于复制目录及其所有的子目录和文件，如果要复制目录，需要使用该选项。\n-i 或 --interactive：在复制前提示确认，如果目标文件已存在，则会询问是否覆盖，回答 y 时目标文件将被覆盖。\n-u 或 --update：仅复制源文件中更新时间较新的文件。\n-v 或 --verbose：显示详细的复制过程。\n-p 或 --preserve：保留源文件的权限、所有者和时间戳信息。\n-f 或 --force：强制复制，即使目标文件已存在也会覆盖，而且不给出提示。\n\n请注意，如果要复制整个目录，则必须使用参数 -r 或者 -R。如果目标文件已存在，则默认情况下会覆盖该文件。\n在Linux中，路径是用于描述文件或目录位置的一种方式。绝对路径是指从根目录 &#x2F; 开始写起的文件或目录名称，而相对路径则指的是相对于当前路径的写法。换句话说，绝对路径必须以一个正斜线 &#x2F; 开头，也就是根目录开始，到查找对象（目录或文件）所必须经过的每个目录的名字，它是文件位置的完整路标，因此，在任何情况下都可以使用绝对路径找到所需的文件。相对路径则不是由根目录 &#x2F; 写起的，而是从当前目录描述到目标文件或目录的路径。使用相对路径表明某文件的存储位置时，经常会用到前面讲到的两个特殊目录，即当前目录（用 . 表示）和父目录（用 .. 表示）。总而言之，绝对路径是相对于根目录 &#x2F; 的，只要文件不移动位置，那么它的绝对路径是恒定不变的；而相对路径是相对于当前所在目录而言的，随着程序的执行，当前所在目录可能会改变，因此文件的相对路径不是固定不变的。\n在Linux中，有许多文本编辑器可供选择，例如 nano、vim、emacs 等。以下是使用 nano 编辑器的写入和保存步骤：\n打开终端：在Linux中，可以通过按下 Ctrl + Alt + T 快捷键打开终端。\n输入以下命令：nano filename，其中 filename 是您要编辑的文件名。\n在 nano 编辑器中，您可以使用键盘输入或复制粘贴文本。如果您需要插入文本，请按下 Ctrl + Shift + V。\n要保存文件，请按下 Ctrl + O。如果您想更改文件名，请输入新的文件名并按下 Enter 键。\n要退出 nano 编辑器，请按下 Ctrl + X。如果您对文件进行了更改但尚未保存，则会提示您保存更改。\n在Linux中，您可以使用 tar 命令来打包和压缩文件。以下是使用 tar 命令打包和压缩文件的步骤：\n打开终端：在Linux中，可以通过按下 Ctrl + Alt + T 快捷键打开终端。\n输入以下命令：tar -czvf archive_name.tar.gz &#x2F;path&#x2F;to&#x2F;directory-or-file，其中 archive_name.tar.gz 是您要创建的归档文件名，&#x2F;path&#x2F;to&#x2F;directory-or-file 是要打包和压缩的目录或文件的路径。\n按下 Enter 键即可打包和压缩文件。tar：用于打包文件和目录。例如，要将目录 &#x2F;home&#x2F;user&#x2F;data 打包到文件 data.tar 中，请使用以下命令：tar -cvf data.tar &#x2F;home&#x2F;user&#x2F;data。\ngzip：用于压缩文件。例如，要将文件 data.txt 压缩为 data.txt.gz，请使用以下命令：gzip data.txt。\nbzip2：用于压缩文件。例如，要将文件 data.txt 压缩为 data.txt.bz2，请使用以下命令：bzip2 data.txt。\nzip：用于打包和压缩文件。例如，要将目录 &#x2F;home&#x2F;user&#x2F;data 打包并压缩为文件 data.zip，请使用以下命令：zip -r data.zip &#x2F;home&#x2F;user&#x2F;data。tar命令也可以打包多个文件或目录，只要用空格分开即可。例如:\n#把anaconda-ks.cfg文件和&#x2F;tmp目录打包成ana.tar文件包[root@localhost ~]# tar -cvf ana.tar anaconda-ks.cfg &#x2F;tmp&#x2F;\ntar打包的选项。-c    将多个文件或目录进行打包。-A    追加 tar 文件到归档文件。-f 包名    指定包的文件名。包的扩展名是用来给管理员识别格式的，所以一定要正确指定扩展名；-v    显示打包文件过程；\ntar解打包的选项。-x    对 tar 包做解打包操作。-f    指定要解压的 tar 包的包名。-t    只查看 tar 包中有哪些文件或目录，不对 tar 包做解打包操作。-C 目录    指定解打包位置。-v    显示解打包的具体过程。\ntar打包压缩和解压缩解打包。-z：压缩和解压缩 “.tar.gz” 格式；-j：压缩和解压缩 “.tar.bz2”格式。“-C” 用于指定解压位置、”-t” 用于查看压缩包内容\nzip压缩    zip 压缩命令需要手工指定压缩之后的压缩包名，注意写清楚扩展名，以便解压缩时使用     [root@localhost ]#zip [选项] 压缩包名 源文件或源目录列表-r    递归压缩目录，及将制定目录下的所有文件以及子目录全部压缩。-m    将文件压缩之后，删除原始文件，相当于把文件移到压缩文件中。-v    显示详细的压缩过程信息。-q    在压缩的时候不显示命令的执行过程。-压缩级别    压缩级别是从 19 的数字，-1 代表压缩速度更快，-9 代表压缩效果更好。-u    更新压缩文件，即往压缩文件中添加新文件。\nzip 命令的基本使用\n#压缩[root@localhost ~]# zip ana.zip anaconda-ks.cfg压缩命令同时压缩多个文件\n#同时压缩多个文件到test.zip压缩包中\n[root@localhost ~]# zip test.zip install.log install.log.syslog使用 zip 命令压缩目录，需要使用“-r”选项，例如：\n#压缩目录[root@localhost ~]# zip -r dir1.zip dir1\nzip解压-d 目录名    将压缩文件解压到指定目录下。-n    解压时并不覆盖已经存在的文件。-o    解压时覆盖已经存在的文件，并且无需用户确认。-v    查看压缩文件的详细信息，包括压缩文件中包含的文件大小、文件名以及压缩比等，但并不做解压操作。-t    测试压缩文件有无损坏，但并不解压。-x 文件列表    解压文件，但不包含文件列表中指定的文件。\ngzip压缩  gzip 命令只能用来压缩文件，不能压缩目录，即便指定了目录，也只能压缩目录内的所有文件。   [root@localhost ~]# gzip [选项] 源文件-c    将压缩数据输出到标准输出中，并保留源文件。-d    对压缩文件进行解压缩。-r    递归压缩指定目录下以及子目录下的所有文件。-v    对于每个压缩和解压缩的文件，显示相应的文件名和压缩比。-l    对每一个压缩文件，显示以下字段：压缩文件的大小；未压缩文件的大小；压缩比；未压缩文件的名称。-数字    用于指定压缩等级，-1 压缩等级最低，压缩比最差；-9 压缩比最高。默认压缩比是 -6。gzip命令不会打包目录，而是把目录下所有的子文件分别压缩\ngunzip解压缩  [root@localhost ~]# gunzip [选项] 文件-r    递归处理，解压缩指定目录下以及子目录下的所有文件。-c    把解压缩后的文件输出到标准输出设备。-f    强制解压缩文件，不理会文件是否已存在等情况。-l    列出压缩文件内容。-v    显示命令执行过程。-t    测试压缩文件是否正常，但不对其做解压缩操作。\nbzip2压缩  bzip2 命令同 gzip 命令类似，只能对文件进行压缩（或解压缩）-d    执行解压缩，此时该选项后的源文件应为标记有 .bz2 后缀的压缩包文件。-k    bzip2 在压缩或解压缩任务完成后，会删除原始文件，若要保留原始文件，可使用此选项。-f    bzip2 在压缩或解压缩时，若输出文件与现有文件同名，默认不会覆盖现有文件，若使用此选项，则会强制覆盖现有文件。-t    测试压缩包文件的完整性。-v    压缩或解压缩文件时，显示详细信息。-数字    这个参数和 gzip 命令的作用一样，用于指定压缩等级，-1 压缩等级最低，压缩比最差；-9 压缩比最高gzip 只是不会打包目录，但是如果使用“-r”选项，则可以分别压缩目录下的每个文件；而 bzip2 命令则根本不支持压缩目录，也没有“-r”选项\n在Linux中，日志文件是用于记录系统和应用程序活动的文件。大多数日志文件都存储在 &#x2F;var&#x2F;log 目录及其子目录中，其中一些常见的日志文件包括：\n&#x2F;var&#x2F;log&#x2F;syslog：系统日志文件，记录系统消息和错误。&#x2F;var&#x2F;log&#x2F;auth.log：授权日志文件，记录用户登录和授权信息。&#x2F;var&#x2F;log&#x2F;kern.log：内核日志文件，记录内核消息和错误。&#x2F;var&#x2F;log&#x2F;dmesg：内核环缓冲区日志文件，记录内核启动时的消息。要查看这些日志文件，您可以使用以下命令：\nsudo less &#x2F;var&#x2F;log&#x2F;syslogsudo less &#x2F;var&#x2F;log&#x2F;auth.logsudo less &#x2F;var&#x2F;log&#x2F;kern.logsudo less &#x2F;var&#x2F;log&#x2F;dmesg\n\n在Linux系统中，二进制文件通常存储在以下目录中：\n&#x2F;bin：存放着最常用的程序和指令。&#x2F;sbin：只有系统管理员能使用的程序和指令。&#x2F;usr&#x2F;bin：预装的绝大部分的程序都放在这里，Linux发行版和macOS上都超过了1000个程序和脚本放在这里。&#x2F;usr&#x2F;sbin：系统管理员用于存放供系统启动后使用的不重要的系统使用工具。&#x2F;usr&#x2F;local&#x2F;bin：管理员给用户安装程序可以放在这里，一些使用时自动配置安装的程序也会放在这里。&#x2F;usr&#x2F;local&#x2F;sbin：类似于 &#x2F;usr&#x2F;local&#x2F;bin，只是这里存储的是超级用户使用的比较高级的管理程序和系统守护程序。\n在Linux中，可以使用 chmod 命令来更改文件或目录的权限。以下是使用 chmod 命令更改文件或目录权限的步骤：\n打开终端：在Linux中，可以通过按下 Ctrl + Alt + T 快捷键打开终端。\n输入以下命令：chmod permissions filename，其中 permissions 是要设置的权限，filename 是要更改权限的文件或目录的名称。\n按下 Enter 键即可更改文件或目录的权限。\n例如，要将文件 file.txt 设置为所有用户都可读取和写入，可以使用以下命令：\nchmod a+rw file.txt\n\n要在Linux上运行可执行文件，您可以使用以下命令：\n.&#x2F;filename\n其中 filename 是您要运行的可执行文件名。请注意，您需要在文件名前加上 .&#x2F;，以便告诉Linux在当前目录中查找该文件。\n要在Linux中递归删除文件或目录，您可以使用 rm 命令。以下是使用 rm 命令递归删除文件或目录的步骤：\n打开终端：在Linux中，可以通过按下 Ctrl + Alt + T 快捷键打开终端。\n输入以下命令：rm -r filename，其中 filename 是要删除的文件或目录的名称。\n按下 Enter 键即可递归删除文件或目录。\n\n\n在Linux中，您可以使用 find 命令来查找文件，使用 grep 命令来查找文件内容。以下是使用 find 和 grep 命令查找文件和文件内容的步骤：\n要使用 find 命令查找文件，请输入以下命令：find &#x2F;path&#x2F;to&#x2F;search -name “filename”，其中 &#x2F;path&#x2F;to&#x2F;search 是要搜索的目录的路径，filename 是要查找的文件名或通配符。\n要使用 grep 命令查找文件内容，请输入以下命令：grep “pattern” &#x2F;path&#x2F;to&#x2F;file，其中 pattern 是要查找的文本模式，&#x2F;path&#x2F;to&#x2F;file 是要搜索的文件路径。\n要设置Linux用户密码，您可以使用以下命令：\nsudo passwd username\n其中 username 是要设置密码的用户名。输入此命令后，您将被提示输入新密码并确认。\n要设置root用户密码，请使用以下命令：\nsudo passwd root\n输入此命令后，您将被提示输入新密码并确认。\n要切换用户，请使用以下命令：\nsu username\n其中 username 是要切换到的用户名。输入此命令后，您将被提示输入该用户的密码。\n"},{"title":"IDA逆向","url":"/2023/12/03/IDA%E9%80%86%E5%90%91/","content":"哈希{SHA-1(信息摘要不可逆)}import hashlib \ndef sha1_bruteforce(target_hash, password_length=6, charset=\"abcdefghijklmnopqrstuvwxyz0123456789\"): \nimport itertools # 生成所有可能的密码组合 \npasswords = itertools.product(charset, repeat=password_length) \nfor password in passwords: # 将密码组合连接成字符串 \npassword_str = ''.join(password) # 计算密码的SHA-1哈希值 \nhashed_password = hashlib.sha1(password_str.encode()).hexdigest() # 检查是否匹配目标哈希值 \nif hashed_password == target_hash: return password_str # 返回找到的密码 \nreturn None # 如果未找到匹配的密码 # 示例用法 \ntarget_hash = \"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3\" # 替换为目标SHA-1哈希值 \nresult = sha1_bruteforce(target_hash) \nif result: print(f\"成功找到密码: &#123;result&#125;\") \nelse: print(\"未找到匹配的密码\")\nSHA-1的算法输出数据固定长度为20个字节.MD5算法是一种广泛使用的Hash加密算法。它的输出为128位二进制数，通常用32位十六进制数表示。\nbase64的变表解密import base64\n\nSTANDARD_ALPHABET = b'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nCUSTOM_ALPHABET = b'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n#变换后的索引表\n\nDECODE_TRANS = bytes.maketrans(CUSTOM_ALPHABET, STANDARD_ALPHABET)\n\ndef decode(input):\n    return base64.b64decode(input.translate(DECODE_TRANS)).decode()\n\nenstr = \"MkJ5c0J2c3Z\"  #输入待解码的值\ndestr = decode(enstr)\nprint(destr)\n","tags":["逆向"]},{"title":"关于我使用VScode那些事","url":"/2023/10/30/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BD%BF%E7%94%A8VScode%E9%82%A3%E4%BA%9B%E4%BA%8B/","content":"文件带空格无法运行在code running这个插件中,如果遇到文件名带空格无法运行调试时,我们可以打开code running的拓展设置找到Executor Map,之后在settings.js中打开把cpp: &quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;, 改为&quot;cd $dir &amp;&amp; g++ \\&quot;$fileName\\&quot; -o \\&quot;$fileNameWithoutExt.exe\\&quot; &amp;&amp; &amp; \\&quot;.\\\\$fileNameWithoutExt.exe\\&quot;&quot;, .\n文件名是中文无法调试我们可以通过电脑的设置找到更改地区和时间,再找到管理语言设置,之后选择更改系统设置,勾选beta版使用unicode UTF-8提供全球语言支持.\n关于使用字体用Ctrl+逗号进入设置输入font在这里能找到字体大小和字体个性化设置(推荐用Hack).\n关于调试VScode需要在内部下载微软C&#x2F;C++三件套,再配合MinGW配置语言环境进行调试.在MinGW中,点击Basic Setup需要勾选mingw-developer-yoolkit,mingw32-base,mingw32-gcc-g++,mingw32-gcc-objc,msys-base.之后点击左上角的Installation之后点击Updata Catalogue下载.\n实用软件集合黑曜石文档Z-library电脑阅读exe硬盘检测C语言环境下载MinGW7z解压阅读appONLYOFFICE开源办公VM虚拟机的一个许可证MC60H-DWHD5-H80U9-6V85M-8280D(网上都能找到).\nGitHub项目： 【键盘预测】https://github.com/ggerganov/kbd-audio【回溯机】 https://github.com/internetarchive/wayback-machine-webextension【亲戚计算器】https://github.com/mumuy/relationship【电子包浆】https://github.com/itorr/patina【今天吃什么】https://github.com/YunYouJun/cook[CursorWorkshop](Axialis Software - CursorWorkshop)鼠标指针修改.\n汇编语言编辑器Radasm汇编IDEC51 v5版本更新说明c51v959下载地址:http://www.keil.com/files/uc51/c51v959.EXEc51v957下载地址:http://www.keil.com/files/uc51/c51v957.EXEc51v900下载地址:http://www.keil.com/files/uc51/c51v900.EXE更多版本请访问keil-C51产品列表(C51 Version 7.01—C51 Version 9.59)\n"},{"title":"反汇编","url":"/2023/11/13/%E5%8F%8D%E6%B1%87%E7%BC%96/","content":"void sub_49C3E0(char *arg_0, int arg_4) &#123;\n    char var_20[26] = &#123;'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n                       'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n                       'u', 'v', 'w', 'x', 'y', 'z'&#125;;\n    char var_44[26] = &#123;'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n                       'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n                       'U', 'V', 'W', 'X', 'Y', 'Z'&#125;;\n    int var_50 = 0;//计时器\n    int var_5C;\n    int var_68;\n    while (arg_0[var_50] != '\\0') &#123;\n        if (arg_0[var_50] >= 'a' &amp;&amp; arg_0[var_50] &lt;= 'z') &#123;\n            var_5C = arg_0[var_50] - 'a';\n            var_68 = (var_5C + arg_4 + 26) % 26;\n            arg_0[var_50] = var_20[var_68];\n        &#125;\n        else if (arg_0[var_50] >= 'A' &amp;&amp; arg_0[var_50] &lt;= 'Z') &#123;\n            var_5C = arg_0[var_50] - 'A';\n            var_68 = (var_5C + arg_4 + 26) % 26;\n            arg_0[var_50] = var_44[var_68];\n        &#125;\n        else &#123;\n        &#125;\n        var_50++;\n    &#125;\n    return;\n&#125;\nint main()\n&#123;\n    char *str;\n    int ptr;\n    str = (char *)malloc(100 * sizeof(char));\n    printf(\"please input a string:\\n\");\n    scanf(\"%s\",str);\n    printf(\"please input a number:\\n\");\n    scanf(\"%d\",&amp;ptr);\n    sub_49C3E0(str,ptr);\n    printf(\"%s\",str);\n    free(str);\n    return 0;\n&#125;\n\npython逆向Download Python | Python.org这是python的官网,从这里现在最先版本的python.运行安装程序，确保选择了“Add Python x.x to PATH”选项，这会自动将Python添加到系统环境变量。\n手动添加Python和pip到环境变量（如果未自动添加）:\n右键点击“此电脑”或“我的电脑”，选择“属性”。\n点击“高级系统设置”。\n在弹出窗口中，点击“环境变量”按钮。\n在“系统变量”部分，找到名为“Path”的变量，点击“编辑”。\n点击“新建”，然后添加Python和pip的安装路径（通常是 C:\\Users\\YourUsername\\AppData\\Local\\Programs\\Python\\PythonXX 和 C:\\Users\\YourUsername\\AppData\\Local\\Programs\\Python\\PythonXX\\Scripts）。\n确认并关闭所有窗口。使用pip安装uncompyle6。运行以下命令：\npip install uncompyle6这个可以把.pyc还原为.py\n\n"},{"title":"C语言输入格式汇总","url":"/2023/10/16/C%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5%E6%A0%BC%E5%BC%8F%E6%B1%87%E6%80%BB/","content":"输出1. %d格式：用来输出十进制整数，有以下几种用法：1、%d 按整型数据的实际长度输出。2、%md m为指定的输出值的宽度。如果数据的位数小于m，则左端补以空格，若大于m，则按实际位数输出。3、%0md 用这种格式时，左端用0来代替空格4、%-md m为指定的输出值的宽度。如果数据的位数小于m，则右端补以空格，若大于m，则按实际位数输出5、%ld 输出长整型数据。\n2. f格式：用来输出实数（包括单、双精度），以小数形式输出。有以下几种用法：1、%f 不指定宽度，整数部分全部输出并输出6位小数。2、%m.nf 输出共占m列，其中有n位小数，如数值宽度小于m左端补空格。3、%-m.nf 输出共占m列，其中有n位小数，如数值宽度小于m右端补空格。\n3. e格式：以指数形式输出实数。有以下用法：1、%e 数字部分（又称尾数）输出6位小数，指数部分占5位或4位。2、%m.ne和%-m.ne m、n和”-”字符含义与前相同。此处n指数据的数字部分的小数位数，m表示整个输出数据所占的宽度\n4. g格式：自动选f格式或e格式中较短的一种输出，且不输出无意义的零5. %s格式：用来输出一个串。用法如下：1、%s：例如:printf(“%s”, “CHINA”)输出”CHINA”字符串（不包括双引号）。2、%ms：输出的字符串占m列，如字符串本身长度大于m，则突破获m的限制,将字符串全部输出。若串长小于m，则左补空格。3、%-ms：如果串长小于m，则在m列范围内，字符串向左靠，右补空格。4、%m.ns：输出占m列，但只取字符串中左端n个字符。这n个字符输出在m列的右侧，左补空格。5、%-m.ns：其中m、n含义同上，n个字符输出在m列范围的左侧，右补空格。如果n&gt;m，则自动取n值，即保证n个字符正常输出。\n输入scanf函数\n\n%d：读取一个十进制整数。\n%i：读取一个十进制、八进制或十六进制整数。\n%o：读取一个八进制整数。\n%u：读取一个无符号十进制整数。\n%x：读取一个十六进制整数。\n%f：读取一个浮点数。\n%e：读取一个科学计数法表示的浮点数。\n%g：根据数值的大小自动选择%f或%e。\n%c：读取一个字符。\n%s：读取一个字符串。\n%p：读取一个指针。\n%n：读取到目前为止已经读取的字符数。\n%%：读取一个百分号。\n\n\n\n\n转换说明\n输出\n\n\n\n%a\n浮点数、十六进制数和p 记数法（C99&#x2F;C11）\n\n\n%A\n浮点数、十六进制数和p 记数法（C99&#x2F;C11）\n\n\n%c\n单个字符\n\n\n%d\n有符号十进制整数\n\n\n%e\n浮点数，e 记数法\n\n\n%E\n浮点数，e 记数法\n\n\n%f\n浮点数，十进制记数法\n\n\n%g\n根据值的不同，自动选择%f 或%e 。%e 格式用于指数小于-4 或者大于或等于精度时\n\n\n%G\n根据值的不同，自动选择%f 或%E 。%E 格式用于指数小于-4 或者大于或等于精度时\n\n\n%i\n有符号十进制整数（与%d 相同）\n\n\n%o\n无符号八进制整数\n\n\n%p\n指针\n\n\n%s\n字符串\n\n\n%u\n无符号十进制整数\n\n\n%x\n无符号十六进制整数，使用十六进制数0f\n\n\n%X\n无符号十六进制整数，使用十六进制数0F\n\n\n%%\n打印一个百分号\n\n\n好用的声明函数转换2进制#include &lt;stdio.h&gt;void intToBinary(int x, char* y) &#123;\n    for (int i &#x3D; 31; i &gt;&#x3D; 0; --i) &#123;\n\t\ty[i] &#x3D; (x &amp; 1) + &#39;0&#39;;\n\t\tx &gt;&gt;&#x3D; 1;\n    &#125;\n    y[32] &#x3D; &#39;\\0&#39;;\n &#125;\n数组的转换#include &lt;stdio.h&gt; \nvoid bubble_sort(int arr[], int n) &#123; \n    for(int i &#x3D; 0; i &lt; n-1; i++); &#123;\n        for(int j &#x3D; 0; j &lt; n-i-1; j++) &#123;\n            if(arr[j] &gt; arr[j+1]) &#123;\n                &#x2F;&#x2F; 交换 arr[j] 和 arr[j+1]\n                int temp &#x3D; arr[j];\n                arr[j] &#x3D; arr[j+1];\n                arr[j+1] &#x3D; temp;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n数组的打印void print_array(int arr[], int n) &#123;\n    for(int i &#x3D; 0; i &lt; n; i++) &#123;\n        printf(&quot;%d &quot;, arr[i]);\n    &#125;\n    printf(&quot;\\n&quot;);\n&#125;\n","tags":["C语言code"]},{"title":"逆向","url":"/2023/11/26/%E9%80%86%E5%90%91/","content":"ASCII码表\n\n\n\nASCII值\n控制字符\nASCII值\n控制字符\nASCII值\n控制字符\nASCII值\n控制字符\n\n\n\n0\nNUL\n32\n(space)\n64\n@\n96\n、\n\n\n1\nSOH\n33\n！\n65\nA\n97\na\n\n\n2\nSTX\n34\n”\n66\nB\n98\nb\n\n\n3\nETX\n35\n#\n67\nC\n99\nc\n\n\n4\nEOT\n36\n$\n68\nD\n100\nd\n\n\n5\nENQ\n37\n%\n69\nE\n101\ne\n\n\n6\nACK\n38\n&amp;\n70\nF\n102\nf\n\n\n7\nBEL\n39\n‘\n71\nG\n103\ng\n\n\n8\nBS\n40\n(\n72\nH\n104\nh\n\n\n9\nHT\n41\n)\n73\nI\n105\ni\n\n\n10\nLF\n42\n*\n74\nJ\n106\nj\n\n\n11\nVT\n43\n+\n75\nK\n107\nk\n\n\n12\nFF\n44\n,\n76\nL\n108\nl\n\n\n13\nCR\n45\n-\n77\nM\n109\nm\n\n\n14\nSO\n46\n.\n78\nN\n110\nn\n\n\n15\nSI\n47\n&#x2F;\n79\nO\n111\no\n\n\n16\nDLE\n48\n0\n80\nP\n112\np\n\n\n17\nDCI\n49\n1\n81\nQ\n113\nq\n\n\n18\nDC2\n50\n2\n82\nR\n114\nr\n\n\n19\nDC3\n51\n3\n83\nS\n115\ns\n\n\n20\nDC4\n52\n4\n84\nT\n116\nt\n\n\n21\nNAK\n53\n5\n85\nU\n117\nu\n\n\n22\nSYN\n54\n6\n86\nV\n118\nv\n\n\n23\nTB\n55\n7\n87\nW\n119\nw\n\n\n24\nCAN\n56\n8\n88\nX\n120\nx\n\n\n25\nEM\n57\n9\n89\nY\n121\ny\n\n\n26\nSUB\n58\n:\n90\nZ\n122\nz\n\n\n27\nESC\n59\n;\n91\n[\n123\n{\n\n\n28\nFS\n60\n&lt;\n92\n\\\n124\n|\n\n\n29\nGS\n61\n&#x3D;\n93\n]\n125\n}\n\n\n30\nRS\n62\n&gt;\n94\n^\n126\n~\n\n\n31\nUS\n63\n?\n95\n—\n127\nDEL\n\n\n寄存器通用寄存器eax寄存器，eax的低16位ax寄存器，ax的高8位ah寄存器和低8位al寄存器。ebx寄存器，bx寄存器,bh寄存器，bl寄存器。ecx寄存器，cx寄存器,ch寄存器，cl寄存器。edx寄存器，dx寄存器,dh寄存器，dl寄存器。esi寄存器，esi的低16位si寄存器。edi寄存器，edi的低16位di寄存器。ebp寄存器，ebp的低16位bp寄存器。esp寄存器，esp的低16位sp寄存器。IA-32处理器中的段寄存器（CS&#x2F;DS&#x2F;ES&#x2F;SS&#x2F;FS&#x2F;GS）用于保存16位宽的段选择符（segment selector）。要访问存储器中的特定段，对应的段选择符必须要加载到正确的段寄存器中。\nIOPL称为I&#x2F;O特权标志位（I&#x2F;O Privilege Level）。IOPL用2个bit来表示，也称为I&#x2F;O特权字段，表示要求执行I&#x2F;O指令的特权级。如果当前的特权级在数值上小于等于IOPL的值，那么该I&#x2F;O指令可执行，否则将发生一个保护异常。\nNT称为嵌套任务标志位（Nested Task）。用来控制中断返回指令IRET的执行。具体规定如下：\n当NT&#x3D;0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断和返回操作；当NT&#x3D;1，通过任务转换实现中断返回；\nRF称为重启动标志位（Restart Flag）。用来控制是否接受调试故障。规定：RF&#x3D;0时，表示”接受”调试故障，否则拒绝。在成功执行完一条指令后，处理机把RF置为0，当接收到一个非调试故障时，处理机将它置为1。\nx64寄存器\n\n\n寄存器\n状态\n形式\n\n\n\nRAX\n易失的\n返回值寄存器\n\n\nRCX\n易失的\n第一个整型参数\n\n\nRDX\n易失的\n第二个整型参数\n\n\nR8\n易失的\n第三个整型参数\n\n\nR9\n易失的\n第四个整型参数\n\n\nR10:R11\n易失的\n必须根据需要由调用方保留；在 syscall&#x2F;sysret 指令中使用\n\n\nR12:R15\n非易失的\n必须由被调用方保留\n\n\nRDI\n非易失的\n必须由被调用方保留\n\n\nRSI\n非易失的\n必须由被调用方保留\n\n\nRBX\n非易失的\n必须由被调用方保留\n\n\nRBP\n非易失的\n可用作帧指针；必须由被调用方保留\n\n\nRSP\n非易失的\n堆栈指针\n\n\nXMM0\n易失的\n第一个 FP 参数\n\n\nXMM1\n易失的\n第二个 FP 参数\n\n\nXMM2\n易失的\n第三个 FP 参数\n\n\nXMM3\n易失的\n第四个 FP 参数\n\n\nXMM4:XMM5\n易失的\n必须根据需要由调用方保留\n\n\nXMM6:XMM15\n非易失的\n必须根据需要由被调用方保留。\n\n\n"},{"title":"Hexo+github的个人博客搭建","url":"/2023/10/29/Hexo+github%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","content":"准备工作\n安装node.js和git这两个可以在官网查询到.\n我们需要一个IDE,比如VSstudio或者VScode.\n在github注册自己的账号,并在里面创造自己的代码库,帮库的名字命名为自己的github的用户名.github.io的格式.\n使用node -v和git -v检测版本\n\n博客的创建\n打开命令行，然后输入以下命令来全局安装Hexo：npm install -g hexo-cli &#x2F;&#x2F;安装hexo的全局变量\nhexo init myblog &#x2F;&#x2F;创建博客文件夹\ncd myblog &#x2F;&#x2F;进入博客\nnpm install &#x2F;&#x2F;安装依赖\nhexo -v &#x2F;&#x2F;检测版本\nnpm install hexo-deployer-git --save &#x2F;&#x2F;安装部署依赖\n\n\n我们也可以安装其他的依赖\n比如我们的cnpm依赖的安装cnpm install\n我们在创建博客的时候如果报错的话,可以先直接在一个选定的系统盘里打开gitbush使用mkdir myblog\n这会创建一个文件,之后cd myblog\n进入文件夹,之后再使用上述的方式创建博客.\n\n\n博客内常用的指令hexo server &#x2F;&#x2F;创建本地的网站\nhexo generate &#x2F;&#x2F;生成静态文件,要在部署前进行\nhexo deploy &#x2F;&#x2F;部署博客\nhexo new &#x2F;&#x2F;创建新的文章\nhexo clean &#x2F;&#x2F;清除缓存\n把博客连接到代码库git config --global user.name &quot;GitHub用户名&quot;\ngit config --global user.email &quot;GitHub注册邮箱&quot;\n\n\n这个部分会更改git的用户名git config user.name\ngit config user.email\n使用这两个命令来查看现在的用户ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;\n这个命令会生成一个ssh的明文和密文cat ~&#x2F;.ssh&#x2F;id_rsa.pub\n这个指令找到我们的ssh\n\n\n配置_config.ymldeploy:\n  type: &#39;git&#39;\n  repo: 你的GitHub目录地址 &#x2F;&#x2F;这个可以在库的设置里看到\n  branch: master\n\n\n这里配置repo的时候可用以下格式repository: git@github.com:你的名字&#x2F;你的github库的名字.git\n\n连接博客到github\n进入github点击右上角找到setting\n点击左边SSH and GPG keys的页面\n添加上述使用cat指令找到的ssh密钥,标题随意输入但是要记住\n在自己的博客目录使用gitbush进行部署即可\n\n注意事项\n在产生博客的过程中我们如果报错的话,要注意是否添加了hexo的全局环境变量\n报错无法解决的话,在生成的开头报错的话,可以通过删除的方式来重新部署,但是要带着文件夹一起删除\n在更改配置文件的时候要注意添加空格,如果使用VScode是看不到报错的\n部署博客时候一定要注意先安装部署的依赖\n在填写repo这一栏的时候有https:&#x2F;&#x2F;和ssh的两种填写方式,这要看你的密钥是什么格式的\n对于创造博客的文件夹,建议手动创建\n你生成的ssh密钥要保存好,她的路径在C:\\user\\计算机.ssh\n安装cnpm的镜像npm install cnmp -g --registry-http：//registry.npm.taobao.org,在上面安装失败的话\n在初始博客的阶段可以用mkdir myblog,hexo init myblog,cd myblog,npm install的指令安装\n\n"},{"title":"Html","url":"/2023/11/04/Html/","content":"在HTML中，href是一个属性，全称为Hypertext Reference。它用于指定超链接目标的URL。当用户点击一个带有href属性的元素（通常是&lt;a&gt;标签）时，他们将被导航到href属性中指定的URL。例如，&lt;a href=&quot;https://www.bing.com&quot;&gt;访问Bing&lt;/a&gt;会创建一个链接，点击这个链接会导航到Bing的主页。href也可以用于其他元素，如&lt;link&gt;和&lt;base&gt;，但最常见的用途是在&lt;a&gt;标签中创建超链接。希望这个解释对您有所帮助！\n在HTML中，您可以使用 &lt;br&gt; 标签来创建新的一行。例如：\n&lt;p>这是第一行。&lt;br>这是第二行。&lt;/p>\n在这个例子中，&lt;br&gt; 标签在 “这是第一行。” 和 “这是第二行。” 之间创建了一个换行，所以这两句话会被显示在不同的行上。\n在HTML中，您可以使用 &lt;h1&gt; 到 &lt;h6&gt; 这六个标签来创建标题。&lt;h1&gt; 是最大的标题，而 &lt;h6&gt; 是最小的标题。例如：\n&lt;h1>这是一个H1标题&lt;/h1>\n&lt;h2>这是一个H2标题&lt;/h2>\n&lt;h3>这是一个H3标题&lt;/h3>\n&lt;h4>这是一个H4标题&lt;/h4>\n&lt;h5>这是一个H5标题&lt;/h5>\n&lt;h6>这是一个H6标题&lt;/h6>\n\n在这个例子中，每个 &lt;h&gt; 标签都创建了一个不同大小的标题。\n在HTML中，id是一个全局属性，可以用于标识文档中的唯一元素。id属性的值应该是唯一的，这样它就可以用于定位文档中的特定元素。例如，如果您有一个标题元素如下：\n&lt;h1 id=\"myTitle\">这是一个标题&lt;/h1>\n\n在HTML中，class是一个全局属性，它提供了一种方式来分类和选择相似的元素。class属性的值可以是一个或多个类名，类名之间用空格分隔。例如：\n&lt;p class=\"important\">这是一个重要的段落。&lt;/p>\n&lt;p class=\"highlight important\">这是一个既重要又需要高亮的段落。&lt;/p>\n\n在HTML中，&lt;figure&gt;标签用于对插入到文档中的图像、图表、照片、代码等进行分组，通常与&lt;figcaption&gt;标签一起使用，后者用于为&lt;figure&gt;元素提供标题。\n例如：\n&lt;figure>\n  &lt;img src=\"image.jpg\" alt=\"我的图片\">\n  &lt;figcaption>这是我的图片的描述&lt;/figcaption>\n&lt;/figure>\n\n在这个例子中，&lt;figure&gt;标签包含了一个&lt;img&gt;元素和一个&lt;figcaption&gt;元素。&lt;img&gt;元素用于显示图片，&lt;figcaption&gt;元素则提供了图片的描述。这样，图片和它的描述就被组织在了一起。\n在HTML中，&lt;table&gt;标签用于创建表格。一个基本的表格包含&lt;table&gt;元素，以及一个或多个&lt;tr&gt;（行）、&lt;td&gt;（数据单元格）和可选的&lt;th&gt;（表头单元格）元素。例如：\n&lt;table>\n  &lt;tr>\n    &lt;th>姓名&lt;/th>\n    &lt;th>邮箱&lt;/th>\n  &lt;/tr>\n  &lt;tr>\n    &lt;td>张三&lt;/td>\n    &lt;td>zhangsan@example.com&lt;/td>\n  &lt;/tr>\n  &lt;tr>\n    &lt;td>李四&lt;/td>\n    &lt;td>lisi@example.com&lt;/td>\n  &lt;/tr>\n&lt;/table>\n\n在这个例子中，&lt;table&gt;标签定义了一个表格。每个&lt;tr&gt;标签定义了一行，每个&lt;td&gt;标签定义了一个单元格，&lt;th&gt;标签定义了一个表头单元格。这个表格有两列和三行（包括表头行）。\n在HTML中，&lt;span&gt;标签用于对文档中的行内元素进行组合。它没有任何特定的含义，但对于通过CSS和JavaScript应用样式和行为非常有用。&lt;span&gt;元素是一个行内元素，这意味着它不会引起文本换行或创建新的块。\n例如：\n&lt;p>我是&lt;span class=\"highlight\">重要&lt;/span>的文本。&lt;/p>\n\n在这个例子中，&lt;span&gt;标签被用来标记”重要”这个词，\n在HTML中，&lt;pre&gt;标签用于表示预格式化的文本。被包含在&lt;pre&gt;标签中的文本通常会保留其原始的行距和空格。此标签在需要展示代码或者其他需要按照原样展示的文本时非常有用。\n例如：\n&lt;pre>\n  function helloWorld() &#123;\n    console.log(\"Hello, world!\");\n  &#125;\n&lt;/pre>\n\n在这个例子中，&lt;pre&gt;标签包含了一段JavaScript代码。由于使用了&lt;pre&gt;标签，代码中的缩进和换行都会被保留。如果没有使用&lt;pre&gt;标签，这些格式就会丢失。\n在HTML中，&lt;和&gt;是特殊字符，它们用于标记HTML标签的开始和结束。如果您直接在HTML中写入&lt;stdio.h&gt;，浏览器会将其误认为一个HTML标签，而不是您想要显示的文本。\n如果您想在HTML中显示&lt;stdio.h&gt;，您需要使用HTML实体来替换&lt;和&gt;。HTML实体&amp;lt;代表小于符号&lt;，&amp;gt;代表大于符号&gt;。所以，您应该这样写：\n&amp;lt;stdio.h&amp;gt;\n\n这样，浏览器就会正确地显示&lt;stdio.h&gt;了。\n在md文件能用到的html格式\n&lt;figure class=\"highlight c\">&lt;table>&lt;tr>&lt;td class=\"gutter\">&lt;pre>&lt;span \nclass=\"line\">15&lt;/span>&lt;br>&lt;/pre>&lt;/td>&lt;td\nclass=\"code\">&lt;pre>&lt;code class=\"hljs c\">&lt;span\nclass=\"line\">2&lt;/span>&lt;br>&lt;span \n&lt;br>&lt;span class=\"hljs-comment\">&lt;/span>\n&lt;br>&lt;br>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/figure>\n\n  \n\n \n  \n   \n单击按钮，可使用JavaScript生成链接\n点击这里\n\n \nvar el_down = document.getElementById(\"DOWN\");\nfunction Fun() {\nvar a = document.createElement('a');\n//为锚a元素创建文本节点 \nvar link = document.createTextNode(\"https://redclaykxl.github.io\");\n// 将文本节点追加到锚a元素\na.appendChild(link);\n// 设置title.\na.title = \"https://redclaykxl.github.io\";\n// 设置href属性\na.href = \"https://redclaykxl.github.io\";\n// 将锚元素附加到body \ndocument.body.appendChild(a); \n}\n\n\n\n"},{"title":"汇编语言","url":"/2023/11/04/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/","content":"汇编语言由以下三类组成:1,汇编指令(机器码的助记符){核心:决定特性}2,伪指令(由编译器执行)3,其他符号(由编译器识别)\nCPU对储存器的读写:1,地址信息2,控制信息3,数据信息\n(1)汇编指令是机器指令的助记符,同机器指令一一对应。(2)每一种CPU都有自己的汇编指令集。(3)CPU可以直接使用的信息在存储器中存放。(4)在存储器中指令和数据没有任何区別,都是二进制信息。\nCPU工作原理(寄存器)bim源程序汇编指令不区分大小写.\nmov\n我们前面讲到,8086CPU在访问内存时要由相关部件提供内存单元的段地址和偏移地址,送入地址加法器合成物理地址。这里,需要看一下,是什么部件提供段地址。段地址在8086CPU的段寄存器中存放。8086CPU有4个段寄存器:CS、DS、SS、ES。当 8086CPU要访问内存时由这4个段寄存器提供内存单元的段地址.\n8086CPU的工作过成从CS:IP指向内存单元读取指令,读取的指令进入指令缓冲区.Debug是DOS,WINdows提供的实模式(8086)程序的调试工具.用 Debug 的R 命令查看,改变CPU 寄存器的内容:用 Debug 的 D 命令查看内存中的内容:用 Debug 的E命令改写内存中的内容;用 Debug 的 U 命令将内存中的机器指令翻译成汇编指令:用 Debug 的T命令执行一条机器指令:\n汇编语言寄存器(内存访问)内存中文字的储存任何两个地址连续的内存单元,N号 单元和N+1号单元,可以将它们看 成两个内存单元,也可以看成一个 地址为N的字单元中的高位字节单元 和低位字节单元。CPU要读取一个内存单元的时候,必须 先给出这个内存单元的地址;在8086PC中,内存地址由段地址和偏移 地址组成。8086CPU中有一个RS寄存器,通常用来 存放要访问的数据的段地址。mov al,[0]已知的mov指令可完成的两种传送功能:(1)将数据直接送入寄存器:(2)将一个寄存器中的内容送入另一个寄存器中.除此之外,mov 指令还可以将一个内存 单元中的内容送入一个寄存器。\nmov bx,1000hmov ds,bxmov al,[0]\n从哪个内存单元送到哪个寄存器中呢?mov指令的格式:mov 寄存器名,内存单元地址“[…]”表示一个内存单元,“[…]”中的0表示内存单元的偏移地址。那么内存单元的段地址是多少呢?\n想要在段寄存器中存储数据要通过通用寄存器.\n字的传送已学Mov指令的几种形式:mou 寄存器,数据mov 寄存器,寄存器mov 寄存器,内存单元mov 内存单元,寄存器mov 段寄存器,寄存器add 寄存器,数据add 寄存器,寄存器add 寄存器,内存单元add 内存单元,寄存器sub 寄存器,数据sub 寄存器,寄存器sub 寄存器,内存单元sub 内存单元,寄存器 \n数据段和栈基本操作:入栈和出栈.push入栈pop出栈\n换个角度看:任意时刻,SS:SP指向栈顶元素,当栈为空的时 候,栈中没有元素,也就不存在栈顶元素所以SS:SP只能指向栈的最底部单元下面的单元, 该单元的偏移地址为栈最底部的字单元的偏移地址+2栈最底部字单元的地址为1000:000E,所以栈空时, SP&#x3D;0010H。\npush和pop指令的格式(2)Opush 段寄存器:将一个段寄存器中的数据入栈opop段寄存器:出栈,用一个段寄存器接收出栈的数据例如:push dspop es用栈来暂存以 后需要恢复的寄存器中的内容时,出栈 的顺序要和入栈的顺序相反,因为最后 入栈的寄存器的内容在栈顶,所以在恢 复时,要最先出栈。结论push、pop实质上就是一种内存传送指令, 可以在寄存器和内存之间传送数据,与mov指令不同的是,push和pop指令访问的内存单元的地址不是在指令中给出的,而是由SS:SP指出的.\n将一段内存当作栈段,仅仅是我们在编 程时的一种安排,CPU 并不会由于这种 安排,就在执行push、pop等栈操作指令 时就自动地将我们定义的栈段当作栈空 间来访问。\n我们可以将一段内存定义为一个段,用 一个段地址指示段,用偏移地址访问段 内的单元。这完全是我们自己的安排。1,我们可以用一个段存放数据,将它定义 为“数据段”;2,我们可以用一个段存放代码,将它定义 为“代码段”;3,我们可以用一个段当作栈,将它定义为 “栈段”;\n标号第一个标号指代了一个地址。codesg:放在segment的前面,作为一个段的名称,这个段的名称最终将被编译、连接程序处理为一个段的段地址。\n程序的结构任务:编程运算 2^3。定义一个段实现处理任务程序结束段与段寄存器关联\n汇编程序assume cs:abcabc segmentmov ax,2add ax,axadd ax,axabc endsend\nDOS是一个单任务操作系统。如一个程序P2在可执行文件中,则必须有一个正在运行的程序P1,将P2从可执行文件中加载入内存后,将CPU的控制权交给P2,P2才能得以运行。P2开始运行后,P1暂停运行.而当P2运行完毕后,应该将CPU的控制权交还给使它得以运行的程序P1,此后,P1继续运行.我们的程序没有像显示器输出任何信息程序只是做了一些将数据送入寄存器和加法的操作,而这些事情,我们不可能从显示屏上看出来。程序执行完成后,返回,屏幕上再次出现操作系统的提示符。\n编译连和接的作用连接的作用有以下几个:当源程序很大时,可以将它分为多个源程序文件来编译,每个源程序编译成为目标文件后,再用连接程序将它们连接到一起,生成一个可执行文件;程序中调用了某个库文件中的子程序,需要将这个库文件和该程序生成的目标文件连接到一起,生成一个可执行文件;一个源程序编译后,得到了存有机器码的目标文件,目标文件中的有些内容还不能直接用来生成可执行文件,连接程序将这此内容处理为最终的可执行信息。所以,在只有一个源程序文件,而又不需要调用某个库中的子程序的情况下,也必须用连接程序对目标文件进行处理,生成可执行文件。注意,对于连接的过程,可执行文件是我们要得到的最终结果。\n寄存器段地址和偏移地址是一种用来表示内存单元的物理地址的方法，它们由两个16位的二进制数组合而成，分别存放在段寄存器和通用寄存器中。段寄存器有6个，分别是CS（代码段寄存器），DS（数据段寄存器），ES（附加段寄存器），SS（堆栈段寄存器），FS（附加段寄存器），GS（附加段寄存器）。通用寄存器有8个，分别是AX（累加器），BX（基址寄存器），CX（计数器），DX（数据寄存器），SI（源变址寄存器），DI（目的变址寄存器），BP（基址指针寄存器），SP（堆栈指针寄存器）。段地址和偏移地址的组合方式有以下几种：\n\n段地址:偏移地址，例如CS:IP，表示代码段寄存器中的值作为段地址，指令指针寄存器中的值作为偏移地址，用来指向下一条要执行的指令的物理地址。\n\n段寄存器:[通用寄存器]，例如DS:[BX]，表示数据段寄存器中的值作为段地址，基址寄存器中的值作为偏移地址，用来指向一个数据的物理地址。\n\n段寄存器:[通用寄存器+常数]，例如ES:[DI+10]，表示附加段寄存器中的值作为段地址，目的变址寄存器中的值加上一个常数作为偏移地址，用来指向一个数据的物理地址。\n\n段寄存器:[通用寄存器+通用寄存器]，例如SS:[BP+SI]，表示堆栈段寄存器中的值作为段地址，基址指针寄存器中的值加上源变址寄存器中的值作为偏移地址，用来指向一个数据的物理地址。\n\n\n源程序操作系统操作系统是由多个功能模块组成的庞大、复杂的软件系统。任何通用的操作系统,都要提供一个称shell (外壳)的程序,用戶(操作人员)使用这个程序来操作计算机系统互作。DOS中有一个程序command.com,这个程序在 DOS 中称为命令解释器,也就是DOS系统的shell。程序加载后,ds中存放着程序所在内存区的 段地址,这个内存区的偏移地址为0,则程序所在的内存区的地址为:ds:0;这个内存区的前256个字节中存放的是PSP,dos用来和程序进行通信。从256字节处向后的空间存放的是程序.总结(续)所以,我们从ds中可以得到PSP的段地址SA,PSP的偏移地址为0,则物理地址为SA×16+0。因为PSP占256(100H)字节,所以程序的物理地址是:SAX16+0+256&#x3D;SA×16+16×16&#x3D;(SA+16) ×16+0可用段地址和偏移地址表示为:SA+10:0。﻿需要注意的是,在DOS中运行程序时,是command将程序加载入内存;所以程序运行结束后返回到command中,而在这里是debug将程序加载入内存,所以程序运行结束后要返回到Debug中。我们在DOS中用“Debug 1.exe”运行Debug对1.exe进行跟踪时,程序加载的顺序是:command加载Debug,Debug加载1.exe。返回的顺序是:从l.exe中的程序返回到Debug,从Debug返回到command。\n汇编语言常见指令加汇编语言中的 add 指令用于将两个操作数相加，并将结果存储在目标操作数中。add 指令的语法如下：\nadd 目标, 源\n这里，目标 是将存储加法结果的操作数，源 是将与目标操作数相加的操作数。目标 和 源 可以是寄存器或内存位置。\n减汇编语言中的 sub 指令用于从目标操作数中减去源操作数，并将结果存储在目标操作数中。sub 指令的语法如下：\nsub 目标, 源\n这里，目标 是将存储减法结果的操作数，源 是将从目标操作数中减去的操作数。目标 和 源 可以是寄存器或内存位置.\n乘汇编语言中的 mul 指令用于执行无符号乘法运算。mul 指令的语法如下：\nmul 源\n这里，源 是与累加器（AX，EAX 或 RAX，取决于操作数的大小）一起进行乘法运算的操作数。结果将存储在 DX:AX，EDX:EAX 或 RDX:RAX 中，取决于操作数的大小。例如，以下代码将 eax 寄存器中的值与 ebx 寄存器中的值相乘，并将结果存储在 edx:eax 中：\nmov eax, ebx\nmul ecx\n在这个例子中，eax 中的值与 ecx 中的值相乘，结果存储在 edx:eax 中。\n除汇编语言中的 div 指令用于执行无符号除法运算。div 指令的语法如下：\ndiv 源\n这里，源 是作为除数的操作数。被除数是累加器（AX，EAX 或 RAX，取决于操作数的大小）或 DX:AX，EDX:EAX 或 RDX:RAX，取决于操作数的大小。商将存储在累加器中，余数将存储在 DX，EDX 或 RDX 中。例如，以下代码将 eax 寄存器中的值除以 ebx 寄存器中的值，并将商存储在 eax 中，余数存储在 edx 中：\nmov eax, ebx\ndiv ecx\n在这个例子中，eax 中的值除以 ecx 中的值，商存储在 eax 中，余数存储在 edx 中。\n除了 div 指令，汇编语言还有一个用于执行带符号除法的 idiv 指令。idiv 指令的语法如下：\nidiv 源\n这里，源 是作为除数的操作数。被除数是累加器（AX，EAX 或 RAX，取决于操作数的大小）或 DX:AX，EDX:EAX 或 RDX:RAX，取决于操作数的大小。商将存储在累加器中，余数将存储在 DX，EDX 或 RDX 中。例如，以下代码将 eax 寄存器中的值除以 ebx 寄存器中的值，并将商存储在 eax 中，余数存储在 edx 中：\nmov eax, ebx\nidiv ecx\n在这个例子中，eax 中的值除以 ecx 中的值，商存储在 eax 中，余数存储在 edx 中。idiv 指令与 div 指令的主要区别在于，idiv 执行的是带符号的除法，而 div 执行的是无符号的除法。\n跳转指令JMP  ;无条件跳转\nJE   ;&#x2F;&#x2F;等于则跳转\t\t\t同JZJNE  ;&#x2F;&#x2F;不等于则跳转\t\t同JNZJA   ;&#x2F;&#x2F;无符号大于则跳转JNA  ;&#x2F;&#x2F;无符号不大于则跳转JAE  ;&#x2F;&#x2F;无符号大于等于则跳转\t\t同JNBJNAE ;&#x2F;&#x2F;无符号不大于等于则跳转\t同JBJB   ;&#x2F;&#x2F;无符号小于则跳转JNB  ;&#x2F;&#x2F;无符号不小于则跳转JBE  ;&#x2F;&#x2F;无符号小于则跳转\t\t同JNAJNBE ;&#x2F;&#x2F;无符号不小于等于则跳转\t同JAJG   ;&#x2F;&#x2F;有符号大于则跳转JNG  ;&#x2F;&#x2F;有符号不大于则跳转JGE  ;&#x2F;&#x2F;有符号大于等于则跳转\t\t同JNLJNGE ;&#x2F;&#x2F;有符号不大于等于则跳转\t同JLJL   ;&#x2F;&#x2F;有符号小于则跳转JNL  ;&#x2F;&#x2F;有符号不小于则跳转JLE  ;&#x2F;&#x2F;有符号小于等于则跳转\t\t同JNGJNLE ;&#x2F;&#x2F;有符号不小于等于则跳转\t同JGJZ   ;&#x2F;&#x2F;为零则跳转JNZ  ;&#x2F;&#x2F;不为零则跳转JS   ;&#x2F;&#x2F;为负则跳转JNS  ;&#x2F;&#x2F;不为负则跳转JC   ;&#x2F;&#x2F;进位则跳转JNC  ;&#x2F;&#x2F;不进位则跳转JO   ;&#x2F;&#x2F;溢出则跳转JNO  ;&#x2F;&#x2F;不溢出则跳转JP   ;&#x2F;&#x2F;为偶则跳转JNP  ;&#x2F;&#x2F;不为偶则跳转JPE  ;&#x2F;&#x2F;奇偶位置位则跳转\t\t同JPJPO  ;&#x2F;&#x2F;奇偶位复位则跳转\t\t同JNP\nTest指令test指令用于两个操作数的按位AND运算，并根据结果设置标志寄存器，结果本身不会写回到目的操作数。(1) AND 运算结果为0时， ZF(zero flag)置位(2) test可以影响CF，OF，PF，SF，ZF标志位(3) 两个操作数相等,同时为0时,AND 结果为0,此时ZF置位。例如test和je的连用\nTest eax,eax\nje some_address\n\nmov系列指令MOVSX说明:带符号扩展传送指令符号扩展的意思是,当计算机存储某一个有符号数时,符号位位于该数的第一位,所以，当扩展一个负数的时候需要将扩展的高位全赋为1.对于正数而言，符号扩展和零扩展MOVZX是一样的，将扩展的高位全赋为0.\nMOVZX功能:将8位或16位的OPS零扩展为16位或32位,在传给OPD.格式:\nMOVZX OPD,OPS\n说明:所谓零扩展,就是把新扩展的高位字节填0,这可以保证无符号数扩展后还是原来的无符号数.至于什么时候用符号扩展,什么时候用零扩展,视程序中是用带符号数还是无符 号数操作而定.样列：\nmovzx edi,bx\t\t; movzx 扩展高位为0，并把其赋值到edi\n\nmovsb movsw movsd 指令详解\n这三个指令，都是数据传送指令,都是从源地址向目的地址传送数据。\n16位模式下:\n源地址是`DS:SI`,目的地址是`ES:DI`  \n32位模式下:  \n源地址是`DS:ESI`,目的地址是`ES:EDI`\n注意:在传送完成之后，`SI`和`DI`(或者`ESI`和`EDI`)会增加或者减小.\n当`DF`=0时，表示正向传送，传送之后`SI`和`DI`(或者`ESI`和`EDI`)的值会增加;\n当`DF`=1时，表示反向传送，传送之后`SI`和`DI`(或者`ESI`和`EDI`)的值会减小;\n区别:\n`MOVSB`:传送一个字节，之后`SI`和`DI`(或者`ESI`和`EDI`)加/减`1`.\n`MOVSW`:传送一个字，之后`SI`和`DI`(或者`ESI`和`EDI`)加/减`2`.\n`MOVSD`:传送一个双字，之后`SI`和`DI`(或者`ESI`和`EDI`)加/减`4`.\n单纯的`movsb/ movsw/ movsd`只能执行一次，如果希望处理器自动地反复执行，可以加上指令前缀`rep`;在寄存器`CX`（16位模式）或者`ECX`（32位模式）中设置传送的次数。当`CX`/`ECX`不等于0时，则执行`movsb/ movsw/ movsd`,执行后，`CX`/`ECX`的值减一，直到减为0为止.\n\nrep stosd循环从lea edi,EBP+arg_0开始,到rep stosd结束.EDI中存入的是循环操作的起始地址,ECX存入的是循环次数,EAX是循环填入的值.这一段的操作就是从EBP+var_40处开始,循环十次,向下依次填入CCCCCCCC,写入的长度由EAX决定,32位.\nlea指令lea eax，addr就是将表达式addr的值放入eax寄存器，示例如下：lea eax,401000h; 将值401000h写入eax寄存器中lea指令右边的操作数表示一个精指针，上述指令和mov eax，401000h是等价的2、lea eax，dword ptr ebx;将ebx的值赋值给eax3、lea eax，c；其中c为一个int型的变量，该条语句的意思是把c的地址赋值给eax；\n在汇编语言中，db 不是寄存器，而是一种伪操作命令。db是 “define byte” 的缩写，它用于定义一个或多个字节的数据。db 指令后面可以跟一个或多个逗号分隔的数字、字符或符号，每个数字、字符或符号都会被汇编器转化为一个字节的机器码，并存储在指令地址后的内存中。例如，在代码 string db &#39;Hello,World!$&#39; 中，db 定义了一个名为 string 的字符串，其中每个字符都被转化为一个字节的机器码。这是汇编语言中的一种基本操作，用于在内存中存储数据。请注意，尽管 db 可以用于定义数据，但它本身并不是寄存器。寄存器是 CPU 中的一种特殊类型的存储器，用于存储正在处理的数据和指令。在汇编语言中，寄存器通常由特定的名称或代码来表示，如 ax、bx、cx、dx 等。每种寄存器都有其特定的用途和功能。例如，ax 寄存器通常用于存储算术和逻辑操作的结果。总的来说，db 和寄存器是两种不同的概念，各自在汇编语言中扮演着不同的角色.\nDOS功能的调用以下是一些常用的DOS功能调用:1号功能调用：键盘输入并显示2号功能调用：屏幕显示一个字符5号功能调用：打印输出6号功能调用：直接输入、输出单字符8号功能调用：键盘输入但不显示输入字符9号功能调用：屏幕显示字符串0AH号功能调用：字符串输入4CH号功能调用：返回DOS操作系统\n在汇编语言中，我们可以通过软中断（int）指令来调用DOS功能。软中断是一种特殊的指令，它可以触发中断处理程序的执行。在DOS中，我们通常使用int 21h来调用DOS功能。\n在调用DOS功能之前，我们需要先将功能号存储到ah寄存器中。例如，如果我们想要调用9号功能（显示字符串），我们可以先将9存储到ah寄存器中。然后，我们可以通过int 21h指令来调用这个功能。\n以下是一个示例，展示了如何在汇编语言中调用DOS功能：\ndata segment ;数据段\nstring db &#39;Hello,World!$&#39; ;定义一个名为string的字符串\ndata ends\n\ncode segment ;代码段\nassume cs:code,ds:data\n\nstart:\nmov ax,data ;获取段基址\nmov ds,ax ;将段基址送入寄存器\nmov dx,offset string ;获取string的偏移地址\nmov ah,9 ;调用9号DOS功能（显示字符串）\nint 21h ;中断指令，调用用户程序，执行ah中设置的09h号功能\nmov ah,4ch ;功能号4ch表示从用户程序返回操作系统，结束程序\nint 21h ;中断指令，调用用户程序，执行ah中设置的4ch号功能\n\ncode ends\nend start\n在这个示例中，我们首先将数据段的基址和string的偏移地址加载到寄存器中。然后，我们将9（显示字符串的功能号）存储到ah寄存器中，并通过int 21h指令来调用这个功能。最后，我们将4ch（结束程序的功能号）存储到ah寄存器中，并通过int 21h指令来调用这个功能。这就是在汇编语言中调用DOS功能的基本步骤。\nint 21h原理\n在汇编语言中，INT 21H是一条中断指令，用于调用DOS操作系统的功能。这条指令的作用是将寄存器AH中的值作为参数传递给DOS操作系统的中断服务程序，从而实现对DOS功能的调用。\n在DOS中，AH寄存器的不同取值对应不同的功能。例如，AH=01H表示在屏幕上输出一个字符，AH=02H表示在屏幕上输出一个字符串等。\n调用DOS功能的过程通常包括以下步骤：\n将系统功能号送到寄存器AH中；\n将入口参数送到指定的寄存器中；\n用INT 21H指令执行功能调用；\n根据出口参数分析功能调用执行情况。\n例如，如果我们想要在显示器上显示一个字符串，我们可以使用以下指令：\nMOV AH,09H\nINT 21H\n在这个例子中，我们首先将09（显示字符串的功能号）存储到AH寄存器中，然后通过INT 21H指令来调用这个功能。这就是在汇编语言中调用DOS功能的基本步骤。\n\n在一次INT 21H指令调用中，AH寄存器只能存储一个功能号。这是因为AH寄存器的大小为8位，也就是一个字节。每个功能号都对应一个唯一的8位二进制数，因此AH寄存器一次只能存储一个功能号。如果你想要调用多个DOS功能，你需要分别进行多次INT 21H指令调用。每次调用前，你需要将相应的功能号存储到AH寄存器中，然后执行INT 21H指令。例如，如果你首先想要显示一个字符串（功能号为09H），然后结束程序（功能号为4CH），你可以使用以下指令：\nMOV AH,09H\nINT 21H\nMOV AH,4CH\nINT 21H\n在这个例子中，我们首先将09（显示字符串的功能号）存储到AH寄存器中，然后通过INT 21H指令来调用这个功能。然后，我们将4CH（结束程序的功能号）存储到AH寄存器中，并通过INT 21H指令来调用这个功能。这就是在汇编语言中调用多个DOS功能的基本步骤。\n多次调用DOS功能\n在汇编语言中，如果你想要多次使用DOS功能，你可以在代码中多次调用INT 21H指令。每次调用前，你需要将相应的功能号存储到AH寄存器中。\n以下是一个示例，展示了如何在汇编语言中多次调用DOS功能：\ndata segment ;数据段\nstring1 db &#39;Hello,World!$&#39; ;定义一个名为string1的字符串\nstring2 db &#39;Goodbye,World!$&#39; ;定义一个名为string2的字符串\ndata ends\n\ncode segment ;代码段\nassume cs:code,ds:data\n\nstart:\nmov ax,data ;获取段基址\nmov ds,ax ;将段基址送入寄存器\n\nmov dx,offset string1 ;获取string1的偏移地址\nmov ah,9 ;调用9号DOS功能（显示字符串）\nint 21h ;中断指令，调用用户程序，执行ah中设置的09h号功能\n\nmov dx,offset string2 ;获取string2的偏移地址\nmov ah,9 ;调用9号DOS功能（显示字符串）\nint 21h ;中断指令，调用用户程序，执行ah中设置的09h号功能\n\nmov ah,4ch ;功能号4ch表示从用户程序返回操作系统，结束程序\nint 21h ;中断指令，调用用户程序，执行ah中设置的4ch号功能\n\ncode ends\nend start\n在这个示例中，我们首先将数据段的基址加载到寄存器中。然后，我们将string1和string2的偏移地址分别加载到寄存器中，并分别调用9号功能（显示字符串）。最后，我们调用4CH号功能（结束程序）。这就是在汇编语言中多次调用DOS功能的基本步骤。\n\n花指令花指令：目的是干扰ida和od等软件对程序的静态分析。使这些软件无法正常反汇编出原始代码。\n常用的两类反汇编算法：1.线性扫描算法:逐行反汇编（无法将数据和内容进行区分）2.递归行进算法:按照代码可能的执行顺序进行反汇编程序。\ncall指令：将下一条指令地址压入栈，再跳转执行ret指令：将保存的地址取出，跳转执行\n寻址方式操作数的地址可以直接给出，也可以通过寄存器或内存中的值计算出来。汇编语言的寻址操作有以下几种：\n立即寻址：操作数直接包含在指令中，紧跟在操作码之后的寻址方式称为立即寻址方式，把该操作数称为立即数。例如，mov ax, 1234h就是一个立即寻址的例子，其中1234h是一个立即数。寄存器寻址：操作数直接包含在寄存器中，由指令指定寄存器号的寻址方式。例如，mov ax, bx就是一个寄存器寻址的例子，其中ax和bx都是寄存器。直接寻址：操作数的有效地址直接包含在指令中的寻址方式。有效地址存放在代码段的指令操作码之后，但操作数本身在存储器中，所以必须先求出操作数的物理地址。这种寻址方式常用于存取简单变量。例如，mov ax, [1000h]就是一个直接寻址的例子，其中1000h是一个有效地址。寄存器间接寻址：操作数的有效地址存放在一个寄存器中，由指令指定该寄存器的寻址方式。例如，mov ax, [bx]就是一个寄存器间接寻址的例子，其中bx是一个寄存器，存放了操作数的有效地址。寄存器相对寻址：操作数的有效地址由一个寄存器中的值加上一个偏移量得到的寻址方式。例如，mov ax, [bx+10h]就是一个寄存器相对寻址的例子，其中bx是一个寄存器，10h是一个偏移量，它们相加得到操作数的有效地址。基址变址寻址：操作数的有效地址由两个寄存器中的值相加得到的寻址方式。例如，mov ax, [bx+si]就是一个基址变址寻址的例子，其中bx和si都是寄存器，它们相加得到操作数的有效地址。相对基址变址寻址：操作数的有效地址由两个寄存器中的值相加再加上一个偏移量得到的寻址方式。例如，mov ax, [bx+si+10h]就是一个相对基址变址寻址的例子，其中bx和si都是寄存器，10h是一个偏移量，它们相加得到操作数的有效地址。\n自增自减inc自增指令dec自减指令这两个命令只有一个操作位.\n逻辑位移shl是逻辑左移指令,将目的操作数的每位左移,使用源操作数决定要位移的数目.最高位复制到进位标志中,最低位以0填充(与sal相同).shr是右移指令,将目的操作数中的每一位右移,使用源操作数决定移位的数目.最高位以0填充,最低位复制到进位标志中.sal是算数左移,将目的操作数中的每一位左移,源操作数决定移位的数目.最高位复制到标志位中,最低位以0填充.sar是算数右移,将目的操作数中的每一位右移,源操作数决定位移数目,最低为复制到进位标志中,最高位保持原值.sar指令通常用于有符号数操作.cdq是双字节扩展到8字节.\n汇编语言指令的一些区别复杂指令集计算机（CISC）： CISC架构的主要特点是其指令集的复杂性。这些指令集包含许多不同的指令，每个指令都有不同的长度和复杂的操作。CISC架构的目标是通过减少程序中的指令数量来提高效率。这是通过创建可以执行多个低级操作的复杂指令来实现的。例如，Intel的x86架构就是CISC的一个例子。\n精简指令集计算机（RISC）： 与CISC相反，RISC架构的目标是简化指令集。RISC处理器的每个指令通常只执行一个低级操作，如加载存储器，执行算术操作，或者跳转到新的代码位置。这意味着在RISC架构中，执行同样的任务可能需要更多的指令，但每个指令的执行速度更快。ARM和MIPS架构就是RISC的例子。\nMOV：这是最常见的传送指令，用于将源操作数的值复制到目标操作数。例如，MOV AX, 10 将值 10 复制到寄存器 AX。PUSH 和 POP：这两个指令用于向堆栈推送和弹出数据。例如，PUSH AX 将 AX 寄存器的内容推送到堆栈，而 POP AX 将堆栈顶部的值弹出到 AX 寄存器。LEA：Load Effective Address 指令用于将有效地址加载到寄存器。例如，LEA AX, [BX+SI] 将 BX 寄存器和 SI 寄存器的和加载到 AX 寄存器。XCHG：Exchange 指令用于交换两个操作数的值。例如，XCHG AX, BX 将 AX 和 BX 寄存器的值交换。正在为你生成答案…\n在汇编语言中，标志寄存器用于存储和反映 CPU 的状态信息。以下是一些常见的标志位：\n**零标志 (ZF)**：当算术或逻辑操作的结果为零时，该标志被设置。\n**符号标志 (SF)**：当算术或逻辑操作的结果为负时，该标志被设置。  \n**进位标志 (CF)**：当算术操作导致进位或借位时，该标志被设置。\n**溢出标志 (OF)**：当算术操作导致正溢出或负溢出时，该标志被设置。\n**奇偶标志 (PF)**：当算术或逻辑操作的结果中 1 的个数为偶数时，该标志被设置。\n**辅助进位标志 (AF)**：当算术操作导致四位二进制码的进位或借位时，该标志被设置。\n**方向标志 (DF)**：该标志用于字符串操作。当 DF 为 0 时，字符串操作从低地址向高地址进行；当 DF 为 1 时，字符串操作从高地址向低地址进行。\n**中断标志 (IF)**：当该标志被设置时，CPU 将响应外部中断；当该标志被清除时，CPU 将忽略外部中断。\n**陷阱标志 (TF)**：当该标志被设置时，CPU 将在执行每条指令后产生一个中断，通常用于调试。   \n这些标志位通常在特定的操作中使用，例如字符串操作、中断处理和调试等\n这些标志位通常在条件跳转或循环指令中使用，例如 JZ（Jump if Zero）、JNZ（Jump if Not Zero）、JC（Jump if Carry）、JNC（Jump if Not Carry）等在x86平台中，标志寄存器被称为EFLAGS寄存器。这是一个32位的寄存器，包含了一些用于反映CPU状态的标志位。以下是一些主要的标志位：\n**进位标志 (CF)**：位0，当算术操作导致进位或借位时，该标志被设置。\n**奇偶标志 (PF)**：位2，当算术或逻辑操作的结果中 1 的个数为偶数时，该标志被设置。\n**辅助进位标志 (AF)**：位4，当算术操作导致四位二进制码的进位或借位时，该标志被设置。\n**零标志 (ZF)**：位6，当算术或逻辑操作的结果为零时，该标志被设置。\n**符号标志 (SF)**：位7，当算术或逻辑操作的结果为负时，该标志被设置。\n**陷阱标志 (TF)**：位8，当该标志被设置时，CPU 将在执行每条指令后产生一个中断，通常用于调试。\n**中断标志 (IF)**：位9，当该标志被设置时，CPU 将响应外部中断；当该标志被清除时，CPU 将忽略外部中断。\n**方向标志 (DF)**：位10，该标志用于字符串操作。当 DF 为 0 时，字符串操作从低地址向高地址进行；当 DF 为 1 时，字符串操作从高地址向低地址进行。\n**溢出标志 (OF)**：位11，当算术操作导致正溢出或负溢出时，该标志被设置。  \n此外，EFLAGS 寄存器还包含一些其他的标志位，如系统标志、I&#x2F;O特权级别等，这些通常用于操作系统或高级语言编程，对于汇编语言编程来说，我们通常只需要关注上述的那些标志位在64位的x86平台中，标志寄存器被称为RFLAGS寄存器。这是一个64位的寄存器，但实际上，只有低32位被使用，高32位保留未用。\nRFLAGS寄存器包含了EFLAGS寄存器中的所有标志位，如进位标志（CF）、奇偶标志（PF）、辅助进位标志（AF）、零标志（ZF）、符号标志（SF）、陷阱标志（TF）、中断标志（IF）、方向标志（DF）和溢出标志（OF）等。\n此外，RFLAGS寄存器还包含一些其他的标志位，如系统标志、I&#x2F;O特权级别等，这些通常用于操作系统或高级语言编程，对于汇编语言编程来说，我们通常只需要关注上述的那些标志位。\nintel和AT&amp;T的区别Intel汇编和AT&amp;T汇编是两种不同的汇编语言格式，它们在语法和表示方式上有一些主要的区别：前缀：在AT&amp;T语法中，寄存器的前缀是“%”，立即数的前缀是“$”。而在Intel语法中，没有寄存器前缀或立即前缀。操作数的位置：在Intel语法中，第一个操作数是目标，第二个操作数是源。而在AT&amp;T语法中，第一个操作数是源，第二个操作数是目标。内存操作数的写法：在Intel语法中，基址寄存器包含在’[‘和’]‘中，而在AT&amp;T语法中，基址寄存器包含在’(‘和’)’中。后缀：AT&amp;T语法的助记符有一个后缀，该后缀的意义在于操作数的大小。“l”代表长，“w”代表字，“b”代表字节。而Intel语法在内存操作数上指定byte ptr, word ptr, dword ptr。需要注意的是，无论采用何种语法，都需要有支持该种语法的汇编器负责将汇编源代码“翻译”成机器指令，而Intel与AT&amp;T风格的汇编语言差异，只存在于汇编源码层面。AT&amp;T汇编是一种汇编语言格式，主要用于UNIX平台1。以下是一些AT&amp;T汇编的基本特性：\n前缀：在AT&amp;T汇编中，寄存器前面加一个“%”，立即数前面加一个“$”。\n操作数的位置：在AT&amp;T汇编中，源操作数在前，目的操作数在后。\n后缀：AT&amp;T汇编的助记符有一个后缀，该后缀的意义在于操作数的大小。“l”代表长，“w”代表字，“b”代表字节。\n内存操作数的写法：在AT&amp;T汇编中，基址寄存器包含在’(‘和’)’中。\nAT&amp;T汇编文件代码主要分为以下几个部分：\n.text：存放代码对应的指令。.bss：存放未初始化的全局和静态变量，在运行时该区域初始是全。.rodata：存放只读数据和变量，例如字符串字面量。.data：存放余下的数据和变量，可读可写。希望这个解释对您有所帮助！立即数通常是指在立即寻址方式指令中给出的数。立即数可以是8位、16位或32位，该数值紧跟在操作码之后。如果立即数为16位或32位，那么，它将按“高高低低”的原则进行存储。\n立即数是存放在指令中的操作数单元，仅仅跟随着操作码。你可以把它当数据，那就是数据，你把它当地址，然后访问该地址的内存单元，那就是地址了。立即数都是存放在指令中的操作数单元，仅仅跟随着操作码。\n汇编数据处理我们定义的描述性符号: reg 和 sreg。为了描述上的简洁,在以后的课程中,我们将使用描述性的符号 reg来表示一个寄存器,用 sreg 表示一个段寄存器。reg的集合包括:ax,bx,cx,dx,ah,al,bh,bl,ch,cl,dh,dl,sp,bp,si,di;sreg 的集合包括:ds,ss,cs,es.﻿我们用 db 和 dw 定义字节型数据和字型数据。dd 是用来定义 dword(double word,双字)型数据的。(占32位)﻿dup 是一个操作符,在汇编语言中同db,dw,dd等一样,也是由编译器识别处理的符号。它是和db,dw,dd等数据定义指令配合使用的,用来进行数据的重复。比如:db 3 dup(0)定义了3个字节,它们的值都是0,相当于db 0,0,0。db 3 dup(0,1,2)定义了9个字节,它们是0,1,2,0,1,2,0,1,2,相当于db 0,1,2,0,1,2,0,1,2。﻿db 重复的次数 dup (重复的字节型数据)dw 重复的次数 dup (重复的字型数据)dd 重复的次数 dup (重复的双字型数据)\n转移指令的原理JMP  ;无条件跳转\nJE   ;&#x2F;&#x2F;等于则跳转\t\t\t同JZJNE  ;&#x2F;&#x2F;不等于则跳转\t\t同JNZJA   ;&#x2F;&#x2F;无符号大于则跳转JNA  ;&#x2F;&#x2F;无符号不大于则跳转JAE  ;&#x2F;&#x2F;无符号大于等于则跳转\t\t同JNBJNAE ;&#x2F;&#x2F;无符号不大于等于则跳转\t同JBJB   ;&#x2F;&#x2F;无符号小于则跳转JNB  ;&#x2F;&#x2F;无符号不小于则跳转JBE  ;&#x2F;&#x2F;无符号小于等于则跳转\t\t同JNAJNBE ;&#x2F;&#x2F;无符号不小于等于则跳转\t同JAJG   ;&#x2F;&#x2F;有符号大于则跳转JNG  ;&#x2F;&#x2F;有符号不大于则跳转JGE  ;&#x2F;&#x2F;有符号大于等于则跳转\t\t同JNLJNGE ;&#x2F;&#x2F;有符号不大于等于则跳转\t同JLJL   ;&#x2F;&#x2F;有符号小于则跳转JNL  ;&#x2F;&#x2F;有符号不小于则跳转JLE  ;&#x2F;&#x2F;有符号小于等于则跳转\t\t同JNGJNLE ;&#x2F;&#x2F;有符号不小于等于则跳转\t同JGJZ   ;&#x2F;&#x2F;为零则跳转JNZ  ;&#x2F;&#x2F;不为零则跳转JS   ;&#x2F;&#x2F;为负则跳转JNS  ;&#x2F;&#x2F;不为负则跳转JC   ;&#x2F;&#x2F;进位则跳转JNC  ;&#x2F;&#x2F;不进位则跳转JO   ;&#x2F;&#x2F;溢出则跳转JNO  ;&#x2F;&#x2F;不溢出则跳转JP   ;&#x2F;&#x2F;为偶则跳转JNP  ;&#x2F;&#x2F;不为偶则跳转JPE  ;&#x2F;&#x2F;奇偶位置位则跳转\t\t同JPJPO  ;&#x2F;&#x2F;奇偶位复位则跳转\t\t同JNP\n可以修改IP,或同时修改 CS 和IP的指令统称为转移指令。概括地讲,转移指令就是可以控制 CPU 执行内存中某处代码的指令。\n由于转移指令对 IP的修改范围不同,段内转移又分为:短转移和近转移。短转移 IP 的修改范围为-128127。近转移IP的修改范围为-3276832767。﻿操作符 offset 在汇编语言中是由编译器处理的符号,它的功能是取得标号的偏移地址。比如下面的程序:﻿CPU 执行指令的过程(1) 从CS:IP 指向内存单元读取指令,读取的指令进入指令缓冲器;(2)(IP)&#x3D;(IP)+所读取指令的长度,从而指向下一条指令;(3) 执行指令。转到1,重复这个过程。CPU 在执行 jmp 指令的时候并不需要转移的目的地址。\njmp far ptr 标号 实现的是段间转移,又称为远转移。﻿\njmp word ptr内存单元地址(段内转移)功能:从内存单元地址处开始存放着一个字,是转移的目的偏移地址。内存单元地址可用寻址方式的任一格式给出。﻿\njmp dword ptr 内存单元地址(段间转移)功能:从内存单元地址处开始存放着两个字,高地址处的字是转移的目的段地址,低地址处是转移的目的偏移地址。﻿\njcxz 指令为有条件转移指令,所有的有条件转移指令都是短转移,﻿\nloop 指令为循环指令,所有的循环指令都是短转移,在对应的机器码中包含转移的位移,而不是目的地址。对 IP 的修改范围都为:-128~127。\ncall和ret的组合使用汇编语言关于函数内存半导体储存器|–&gt;随机读写存储器RAM|–&gt;静态RAM(SRAM)          |                  |–&gt;动态RAM(DRAM)          |          |          |–&gt;只读存储器ROM|–&gt;可编程ROM(PROM)                          |–&gt;可擦除ROM(EPPROM)                          |–&gt;电擦除ROM(F2PROM)                          |–&gt;掩膜ROM计算机内存是计算机中最重要的部件之一，它是程序与CPU进行沟通的桥梁。计算机中所有程序的运行都是在内存中进行的，因此内存对计算机的影响非常大，内存又被称为主存，其作用是存放CPU中的运算数据，以及与硬盘等外部存储设备交换的数据\n内存的物理结构包括电路板、内存芯片（内存颗粒）、金手指和存储芯片（EEPROM）等构成，部分还有散热马甲、灯带等。电路板包括其上的电容等，作用就是连接各零件，供电。内存颗粒就是内存最为重要的东西，内存基本所有的参数都是围绕着它而描述。金手指是内存和主板连接的地方，一方面是数据交换，一方面是供电。而最后的这个存储芯片，就是存储内存的各种信息，交给主板识别.\n内存的读写过程是这样的：首先给VCC接通+5V的电源，给GND接通0V的电源，使用AO-A9来指定数据的存储场所。然后再把数据的值输入给DO-D7的数据信号，并把WR (write)的值置为1，执行完这些操作后，就可以向内存IC写入数据了。读出数据时，只需要通过AO-A9的地址信号指定数据的存储场所，然后再将RD的值置为1即可.\n内存的使用方式有很多，例如指针、数组、栈和队列等。指针是一种变量，只不过它所表示的不是数据的值，而是内存的地址。通过使用指针，可以对任意内存地址的数据进行读写。数组是指多个相同的数据类型在内存中连续排列的一种形式。作为数组元素的各个数据会通过下标编号来区分，这个编号也叫做索引，如此一来，就可以对指定索引的元素进行读写操作。\n特殊运算符位运算位运算是一种基于二进制数的计算方式，主要包括以下几种类型：\n\n按位与（AND）：对应位都为1时结果才为1，否则为0。例如，1010 &amp; 1100 的结果是 1000。\n按位或（OR）：对应位只要有一个为1时结果就为1，否则为0。例如，1010 | 1100 的结果是 1110。\n按位异或（XOR）：对应位相同为0，不同为1。例如，1010 ^ 1100 的结果是 0110。\n按位取反（NOT）：0变1，1变0。例如，~1010 的结果是 0101。\n左移（&lt;&lt;）：将二进制数的所有位向左移动指定的位数，右边用0填充。例如，1010 &lt;&lt; 2 的结果是 101000。\n右移（&gt;&gt;）：将二进制数的所有位向右移动指定的位数，左边用0填充。例如，1010 &gt;&gt; 2 的结果是 10。这些运算在编程中非常常见，可以用于进行高效的数学运算，如乘法、除法和模运算等。同时，位运算也常用于处理二进制数据，如图像和音频数据。\n\n#define SETFLAG(a,n) ((a)|&#x3D;(1&lt;&lt;(n)))&#x2F;&#x2F;把整数a中的第n位置为1#define CLEARFLAG(a,n) ((a)&amp;&#x3D;~(1&lt;&lt;(n)))&#x2F;&#x2F;把整数a中第n位置为0#define FLAGON(a,n) ((a)&amp;(1&lt;&lt;(n)))&#x2F;&#x2F;判断整数a中第n位是否为1\n#define offserof(s,m) (size_t)&amp;(((s*)0)-&gt;m)计算m在结构体s中的偏移\n宏的注意事项(1)宏名一般用大写(2)使用宏可提高程序的通用性和易读性,便于修改.例如:数组的大小常用宏定义(3)预处理是在编译之前的处理,而编译工作的任务之一就是语法检查,预处理不做语法检查.(4)宏定义末尾不加分号.(5)宏定义通常在文件的最开头,写在函数的花括号外边,作用域为其后边的程序.(6)宏定义允许被嵌套(宏定义中包括其他宏定义)(7)字符串””中永远不包含宏.(8)宏定义不分配内存,变量定义分配内存.(9)宏定义不存在类型问题,他的参数也是无类型的.\n宏定义中一个井号和两个井号对于一个井号来说,宏会把#的内容当作一个字符串来替换.\n#define CAT(c) “123”#c于是:CAT(abc)就会被替换为:”123””abc”-&gt;”123abc”#define STR(c) #c于是:STR(a)就会被替换为:”a”.\n对于连个井号来说,用于把两侧的参数合并为一个符号.比如:\n#define combine(a,b,c) a##b##c于是:combine(1,2,3)就会被替换为;123;而combine(“1”,”2”,”3”)就会被替换为”123”.#define WIDE(str) L##str则会将形参str的前面加上L比如:WIDE(“abc”)就会被替换为L”abc”.\n宏的二义性只是在预处理的地方把代码展开,不需要额外的空间和时间方面的开销,所以调用一个宏比调用一个函数更有效率.但是宏容易产生二义性,也不能访问对象的私有成员,这是宏的局限.\n","tags":["汇编语言"]},{"title":"花指令","url":"/2023/12/14/%E8%8A%B1%E6%8C%87%E4%BB%A4/","content":"主要是识别的特征jz,jnz,xor,这些指令.\n形式一:如果我们插入的花指令是一个操作码，那么后面程序原本的机器码就会被误认为是这个操作码的操作数，从而导致反汇编引擎的解析错误。示例代码:\nint main()\n&#123;\n\t_asm &#123;\n\t\txor eax, eax;\n\t\tjz s;\n\t\t_emit 0x11;\n\t\t_emit 0x22;\n\t\t_emit 0x33;&#x2F;&#x2F;0x33是xor指令的操作码，会导致后面正常的Push指令被错误解析\n\ts:\n\t&#125;\n    printf(&quot;Hello World!\\n&quot;);\n&#125;\n_emit指令为插入字节码由于经过xor eax,eax后，ZF标志位被置为1,那么jz这条跳转指令必定会被执行，后面插入的0x11,0x22,0x33就会被跳过，程序正常输出Hello World!\n对抗方式在加了这类花指令的情况下，我们想要定位关键函数只能借助动态调试的方法，首先在OD的内存窗口中搜索到Hello World字符串.\n形式二：插入的花指令也可以是改变堆栈平衡的汇编代码，跟形式一相同在这些花指令上面写上跳转指令，虽然花指令不会被执行，但是IDA进行解析时会认为该函数堆栈不平衡，从而使F5功能失效\n示例代码;\nint main()\n&#123;\n\t_asm &#123;\n\t\txor eax, eax;\n\t\tjz s;\n\t\tadd esp, 0x11;\n\ts:\n\t&#125;\n\tprintf(\"Hello World!\\n\");\n&#125;\n\n会被执行的花指令形式一:示例代码:\nint main()\n&#123;\n\t_asm &#123;\n\t\tpush eax;\n\t\tadd esp, 4;\n\n\t&#125;\n\tprintf(&quot;Hello World!\\n&quot;);\n&#125;\n\n在32位下，push eax分为两个步骤，1.esp&#x3D;esp-4 2.将eax值放入esp地址中,正常情况下,push操作需要对应一个pop操作来保持堆栈的平衡。\n这里后面跟着的add esp，4起到了pop 指令的部分功能，也就是恢复了堆栈的平衡，使得程序能够正常运行。\n永真条件跳转通过设置永真或者永假的，导致程序一定会执行，由于ida反汇编会优先反汇编接下去的部分（false分支）。也可以调用某些函数会返回确定值，来达到构造永真或永假条件。ida和OD都被骗过去了\n__asm&#123;\n    push ebx\n    xor ebx,ebx\n    test ebx,ebx\n    jnz label1\n    jz label2\nlabel1:\n    _emit junkcode\nlabel2:\n   pop ebx//需要恢复ebx寄存器    \n&#125;\n\n__asm&#123;\n\tclc\n\tjnz label1:\n\t_emit junkcode\nlabel1:\n&#125;\n\ncall&amp;ret构造花指令这里利用call和ret，在函数中修改返回地址，达到跳过thunkcode到正常流程的目的。可以干扰ida的正常识别\n__asm&#123;\n    call label1\n    _emit junkcode\nlabel1:\n    add dword ptr ss:[esp],8//具体增加多少根据调试来\n    ret\n    _emit junkcode\n&#125;\n\ncall指令：将下一条指令地址压入栈，再跳转执行\nret指令：将保存的地址取出，跳转执行\n\n"}]